{"version":3,"sources":["serviceWorker.js","redux/reducer.js","store.js","components/Item/TodoListTasks/TodoListTask.jsx","components/Item/TodoListTasks/TodoListTasks.jsx","components/Item/TodoListFooter/TodoListFooter.jsx","components/Item/TodoListHeader/AddNewItemForm.jsx","dal/api.js","components/Item/TodoList/TodoList.jsx","components/Item/Item.jsx","App.js","components/Login/Login.jsx","index.js","images/basket.svg"],"names":["Boolean","window","location","hostname","match","ADD_TASK","initState","todolists","reducers","combineReducers","reducer","state","arguments","length","undefined","action","type","Object","objectSpread2","concat","toConsumableArray","newTodoList","map","t","tasks","filter","id","todolistId","newTask","todo","task","taskId","obj","form","formReducer","store","createStore","TodoListTask","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","editMode","title","activateEditMode","setState","deactiveEditMode","changeTitle","onIsDoneChanged","e","status","currentTarget","checked","changeIsDoneStatus","onTitleChanged","value","onDeleteTask","deleteTask","render","toDoListDoneClass","react_default","a","createElement","className","onChange","onBlur","autoFocus","onClick","src","basket","alt","React","Component","TodoListTasks","tasksElement","Item_TodoListTasks_TodoListTask","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onComplitedFilterClick","onActiveFilterClick","onHideFilterClick","onShowFilterClick","classForAll","filterValue","classForCompleted","classForActive","AddNewItemForm","error","onInputTextChange","onAddNewItemTitle","newTitle","addNewTitle","onPressEnter","errorInput","placeholder","onKeyPress","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","createTask","newTaskTitle","post","getTasks","get","updateTask","put","delete","deleteTodolist","getTodolists","createTodolists","newTodolistTitle","updateTodolist","TodoList","nextTaskId","restoreState","then","res","allTasks","data","items","setTasks","addTask","item","newFilterValue","changeTask","forEach","changeTodolist","_this$props$tasks","weekDay","day","month","TodoListHeader_AddNewItemForm","Item_TodoListTasks_TodoListTasks","Item_TodoListFooter_TodoListFooter","Date","toLocaleString","weekday","TodoListConnected","connect","dispatch","Item","newTodoListId","setTodolists","addTodolist","Item_TodoList_TodoList","ConnectedItem","setTodolist","App","reduxForm","onSubmit","handleSubmit","Field","component","name","components_Item_Item","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c53f6e62.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const ADD_TODOLIST = 'TodoList/Reducer/ADD_TODOLIST';\r\nexport const addTodolist = (newTodoList) => ({type: ADD_TODOLIST, newTodoList});\r\nexport const DELETE_TODOLIST = 'TodoList/Reducer/DELETE_TODOLIST';\r\nexport const deleteTodolist = (todolistId) => ({type: DELETE_TODOLIST, todolistId});\r\nexport const ADD_TASK = 'TodoList/Reducer/ADD_TASK';\r\nexport const addTask = (newTask, todolistId) => ({type: ADD_TASK, newTask, todolistId});\r\nexport const CHANGE_TASK = 'TodoList/Reducer/CHANGE_TASK';\r\nexport const changeTask = (todolistId, taskId, obj) => ({type: CHANGE_TASK, todolistId, taskId, obj});\r\nexport const DELETE_TASK = 'TodoList/Reducer/DELETE_TASK';\r\nexport const deleteTask = (todolistId, taskId) => ({type: DELETE_TASK, todolistId, taskId});\r\nexport const SET_TODOLISTS = 'TodoList/Reducer/SET_TODOLISTS';\r\nexport const setTodolist = (todolists) => ({type: SET_TODOLISTS, todolists});\r\nexport const SET_TASKS = 'TodoList/Reducer/SET_TASKS';\r\nexport const setTasks = (tasks, todolistId) => ({type: SET_TASKS, tasks, todolistId});\r\nexport const CHANGE_TODOLIST = 'TodoList/Reducer/CHANGE_TODOLIST';\r\nexport const changeTodolist = (todolistId, newTodolistTitle) => ({type: CHANGE_TODOLIST, todolistId, newTodolistTitle});\r\n\r\nconst initState = {\r\n    todolists: []\r\n};\r\n\r\nexport const todolistReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodoList]\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map( t => ({...t, tasks: []}))\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(t => {\r\n                    return t.id !== action.todolistId\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {...t, tasks: [...t.tasks, action.newTask]}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map( t => {\r\n                    if(t.id === action.todolistId){\r\n                        return {...t, tasks: action.tasks}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map( todo => {\r\n                    if (todo.id === action.todolistId) {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.map( task => {\r\n                                if (task.id === action.taskId) {\r\n                                    return {...task, ...action.obj};\r\n                                } else {\r\n                                    return task;\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TODOLIST:\r\n            return {\r\n              ...state,\r\n              todolists: state.todolists.map( todo => {\r\n                  if(todo.id === action.todolistId){\r\n                      return {...todo, }\r\n                  } else {\r\n                      return todo\r\n                  }\r\n              })\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map( todo => {\r\n                    if(todo.id === action.todolistId){\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.filter( task => {\r\n                                return task.id !== action.taskId\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport {todolistReducer} from \"./redux/reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nlet reducers = combineReducers({\r\n   reducer: todolistReducer,\r\n   form: formReducer\r\n});\r\n\r\nconst store = createStore(reducers);\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport './TodoListTask.css';\r\nimport basket from '../../../images/basket.svg';\r\n\r\nclass TodoListTask extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    };\r\n\r\n    deactiveEditMode = () => {\r\n        this.props.changeTitle(this.props.task.id, this.state.title);\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n    };\r\n\r\n    onIsDoneChanged = (e) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeIsDoneStatus(this.props.task.id, status);\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    onDeleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let toDoListDoneClass = this.props.task.status ? `${'done'}` : '';\r\n        /*let priorityTitle = '';\r\n        switch(this.props.task.priority){\r\n            case 0: priorityTitle = \"Low\"; break;\r\n            case 1: priorityTitle = \"Middle\"; break;\r\n            case 2: priorityTitle = \"High\"; break;\r\n            case 3: priorityTitle = \"Urgently\"; break;\r\n            case 4: priorityTitle = \"Later\"; break;\r\n        }*/\r\n\r\n        return (\r\n            <div className='todoListTask'>\r\n                {/*<div className='toDoListCheck'>*/}\r\n                    <input type=\"checkbox\" id='check' checked={this.props.task.status === 2} onChange={this.onIsDoneChanged}/>\r\n                    {/*<label htmlFor=\"check\"></label>*/}\r\n                {/*</div>*/}\r\n                <div className='todoListTaskItem'>\r\n                    <div>\r\n                        {this.state.editMode\r\n                            ? <input onBlur={this.deactiveEditMode} onChange={this.onTitleChanged}\r\n                                     autoFocus={true} value={this.state.title}/>\r\n                            : <span onClick={this.activateEditMode} className={toDoListDoneClass}>{this.props.task.title}\r\n                                {/*; priority: {priorityTitle}*/}</span>}\r\n                    </div>\r\n                    <button className='todoListTaskDelete' onClick={this.onDeleteTask}><img src={basket} alt=\"basket\"/></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask\";\r\n\r\nclass TodoListTasks extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render = () => {\r\n\r\n        let tasksElement = this.props.tasks.map(task =>\r\n            <TodoListTask key={task.id}\r\n                          task={task}\r\n                          changeIsDoneStatus={this.props.changeIsDoneStatus}\r\n                          changeTitle={this.props.changeTitle}\r\n                          deleteTask={this.props.deleteTask} />);\r\n\r\n        return (\r\n            <div>\r\n                {tasksElement}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;","import React from 'react';\r\nimport './TodoListFooter.css'\r\n\r\nclass TodoListFooter extends React.Component{\r\n\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All');\r\n    };\r\n\r\n    onComplitedFilterClick = () => {\r\n        this.props.changeFilter('Completed');\r\n    };\r\n\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active');\r\n    };\r\n\r\n    onHideFilterClick = () => {\r\n        this.setState({\r\n            isHidden: true\r\n        })\r\n    };\r\n\r\n    onShowFilterClick = () => {\r\n        this.setState({\r\n            isHidden: false\r\n        })\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === 'All' ? 'filterActive' : '';\r\n        let classForCompleted = this.props.filterValue === 'Completed' ? 'filterActive' : '';\r\n        let classForActive = this.props.filterValue === 'Active' ? 'filterActive' : '';\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {!this.state.isHidden &&\r\n                <div>\r\n                    <button onClick= {() => {this.onAllFilterClick()}}\r\n                            className={classForAll}>All</button>\r\n                    <button onClick= {() => {this.onComplitedFilterClick()}}\r\n                            className={classForCompleted}>Completed</button>\r\n                    <button onClick= {() => {this.onActiveFilterClick()}}\r\n                            className={classForActive}>Active</button>\r\n                </div>}\r\n                {!this.state.isHidden && <span onClick={() => {this.onHideFilterClick()}}>hide</span>}\r\n                {this.state.isHidden && <span onClick={() => {this.onShowFilterClick()}}>show</span>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;","import React from 'react';\r\n\r\nclass AddNewItemForm extends React.Component {\r\n\r\n    state = {\r\n        error: false,\r\n        title: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    onInputTextChange = (e) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        })\r\n    };\r\n\r\n    onAddNewItemTitle = () => {\r\n        let newTitle = this.state.title;\r\n        this.setState({title: ''});\r\n        if (newTitle === '') {\r\n            this.setState({\r\n                error: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                error: false\r\n            });\r\n            this.props.addNewTitle(newTitle);\r\n        }\r\n    };\r\n\r\n    onPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddNewItemTitle();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        let errorInput = this.state.error ? 'error' : '';\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                <div className=\"todoList-newTaskForm\">\r\n                    <input type=\"text\" placeholder=\"New item name\"\r\n                           className={errorInput}\r\n                           onChange={this.onInputTextChange}\r\n                           onKeyPress={this.onPressEnter}\r\n                           value={this.state.title}/>\r\n                    <button onClick={() => {this.onAddNewItemTitle()}\r\n                    }>Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '2a70584b-20f7-4ff5-8c15-684fb9f4be7b'}\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle, todolistId) {\r\n        let promise = instance.post(`/todo-lists/${todolistId}/tasks`,\r\n            {title: newTaskTitle});\r\n        return promise;\r\n    },\r\n    getTasks(taskId) {\r\n        let promise = instance.get(`/todo-lists/${taskId}/tasks`);\r\n        return promise;\r\n    },\r\n    updateTask(task, obj) {\r\n        let promise = instance.put('/todo-lists/tasks',{...task, ...obj});\r\n        return promise;\r\n    },\r\n    deleteTask(taskId) {\r\n        let promise = instance.delete(`/todo-lists/tasks/${taskId}`);\r\n        return promise;\r\n    },\r\n    deleteTodolist(todolistId) {\r\n        let promise = instance.delete(`/todo-lists/${todolistId}`);\r\n        return promise;\r\n    },\r\n    getTodolists() {\r\n        let promise = instance.get('/todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolists(newTodolistTitle) {\r\n        let promise = instance.post('/todo-lists',{title: newTodolistTitle});\r\n        return promise;\r\n    },\r\n    updateTodolist(todolistId, newTodolistTitle) {\r\n        let promise = instance.put(`/todo-lists/${todolistId}`, {title: newTodolistTitle});\r\n        return promise;\r\n    }\r\n};","import React from 'react';\r\nimport TodoListTasks from \"../TodoListTasks/TodoListTasks\";\r\nimport TodoListFooter from \"../TodoListFooter/TodoListFooter\";\r\nimport AddNewItemForm from \"../TodoListHeader/AddNewItemForm\";\r\nimport {connect} from 'react-redux';\r\nimport './TodoList.css';\r\nimport {\r\n    addTask,\r\n    changeTask, changeTodolist,\r\n    deleteTask,\r\n    deleteTodolist, setTasks\r\n} from \"../../../redux/reducer\";\r\nimport {api} from \"../../../dal/api\";\r\nimport basket from \"../../../images/basket.svg\";\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n        this.weekDay = new Date().toLocaleString('ru', {weekday: 'long'});\r\n        this.day = new Date().toLocaleString('ru', {day: 'numeric'});\r\n        this.month = new Date().toLocaleString('ru', {month: 'long'});\r\n    };\r\n\r\n    state = {\r\n        filterValue: 'All',\r\n        nextTaskId: 3\r\n    };\r\n\r\n    restoreState = () => {\r\n        api.getTasks(this.props.id)\r\n            .then(res => {\r\n                let allTasks = res.data.items;\r\n                this.props.setTasks(allTasks, this.props.id);\r\n            });\r\n    };\r\n\r\n    addTask = (newTitle) => {\r\n        api.createTask(newTitle, this.props.id)\r\n            .then(res => {\r\n                let newTask = res.data.data.item;\r\n                this.props.addTask(newTask, this.props.id);\r\n            });\r\n    };\r\n\r\n    changeFilter = (newFilterValue) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        })\r\n    };\r\n\r\n    changeTask = (taskId, obj) => {\r\n        this.props.tasks.forEach(t => {\r\n\r\n            if (t.id === taskId) {\r\n                api.updateTask(t, obj)\r\n                    .then(res => {\r\n                        this.props.changeTask(this.props.id, taskId, obj)\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    changeTodolist = (todolistId, newTodolistTitle) => {\r\n        api.updateTodolist(this.props.id, newTodolistTitle)\r\n            .then(res => {\r\n                this.props.changeTodolist(this.props.id, this.props.title);\r\n            })\r\n    };\r\n\r\n    changeIsDoneStatus = (taskId, status) => {\r\n        this.changeTask(taskId, {status: status})\r\n    };\r\n\r\n    changeTitle = (taskId, title) => {\r\n        this.changeTask(taskId, {title: title})\r\n    };\r\n\r\n    deleteTask = (taskId) => {\r\n        api.deleteTask(taskId)\r\n            .then(res => {\r\n                this.props.deleteTask(this.props.id, taskId);\r\n            });\r\n    };\r\n\r\n    deleteTodolist = () => {\r\n        api.deleteTodolist(this.props.id)\r\n            .then(res => {\r\n                this.props.deleteTodolist(this.props.id);\r\n            });\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let {tasks = []} = this.props;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    <div className=\"todoListHeader\">\r\n                        <div className='todoListTitle'>\r\n                            <div className='todoListDate'>\r\n                                <div  className='todoListDateWeekday'>{`${this.weekDay}, `}<span>{this.day}</span></div>\r\n                                <div className='todoListDateMonth'>{this.month}</div>\r\n                            </div>\r\n                            {/*<TodoListTitle title={this.props.title} changeTodolist={this.changeTodolist}/>*/}\r\n                            <button onClick={() => {\r\n                                this.deleteTodolist()\r\n                            }} className='todoListDeleteButton'><img src={basket} alt=\"basket\"/>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <AddNewItemForm addNewTitle={this.addTask}/>\r\n                    <div className='todoListContent'>\r\n                        <TodoListTasks changeIsDoneStatus={this.changeIsDoneStatus}\r\n                                       changeTitle={this.changeTitle}\r\n                                       changeTask={this.changeTask}\r\n                                       deleteTask={this.deleteTask}\r\n                                       tasks={tasks.filter(t => {\r\n                                           if (this.state.filterValue === 'All') {\r\n                                               return 2;\r\n                                           } else if (this.state.filterValue === 'Active') {\r\n                                               return t.status === 0;\r\n                                           } else {\r\n                                               return t.status === 2;\r\n                                           }\r\n                                           /*switch (this.state.filterValue){\r\n                                               case 'All':\r\n                                                   return true;\r\n                                               case 'Active':\r\n                                                   return t.isDone === false;\r\n                                               case 'Completed':\r\n                                                   return t.isDone === true;\r\n                                               default:\r\n                                                   return false;\r\n                                                   break;\r\n                                           }*/\r\n                                       })}/>\r\n                    </div>\r\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTask: (newTask, todolistId) => {\r\n            const action = addTask(newTask, todolistId);\r\n            dispatch(action)\r\n        },\r\n        setTasks: (tasks, todolistId) => {\r\n            const action = setTasks(tasks, todolistId);\r\n            dispatch(action);\r\n        },\r\n        changeTask: (todolistId, taskId, obj) => {\r\n            const action = changeTask(todolistId, taskId, obj);\r\n            dispatch(action)\r\n        },\r\n        deleteTodolist: (todolistId) => {\r\n            const action = deleteTodolist(todolistId);\r\n            dispatch(action);\r\n        },\r\n        deleteTask(todolistId, taskId) {\r\n            const action = deleteTask(todolistId, taskId);\r\n            dispatch(action);\r\n        },\r\n        changeTodolist(todolistId, newTodolistTitle) {\r\n            const action = changeTodolist(todolistId, newTodolistTitle);\r\n            dispatch(action);\r\n        }\r\n    }\r\n};\r\n\r\nconst TodoListConnected = connect(null, mapDispatchToProps)(TodoList);\r\n\r\nexport default TodoListConnected;\r\n\r\n","import React from 'react';\r\nimport './Item.css';\r\nimport TodoList from \"./TodoList/TodoList\";\r\nimport AddNewItemForm from \"./TodoListHeader/AddNewItemForm\";\r\nimport {addTodolist, setTodolist} from \"../../redux/reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {api} from \"../../dal/api\";\r\n\r\nclass Item extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    };\r\n\r\n    state = {\r\n        newTodoListId: 0\r\n    };\r\n\r\n    restoreState = () => {\r\n        api.getTodolists()\r\n            .then(res => {\r\n                this.props.setTodolists(res.data);\r\n            });\r\n    };\r\n\r\n    addTodolist = (title)=> {\r\n        api.createTodolists(title)\r\n            .then(res => {\r\n                let todolists = res.data.data.item;\r\n                this.props.addTodolist(todolists);\r\n            });\r\n    }\r\n\r\n    render = () => {\r\n\r\n        let todolists = this.props.todolists.map(t => {\r\n            return <TodoList key={t.id} id={t.id} title={t.title} tasks={t.tasks}/>\r\n        });\r\n\r\n        return (\r\n            <div className='item'>\r\n                <div>\r\n                    <AddNewItemForm addNewTitle={this.addTodolist}/>\r\n                </div>\r\n                <div className=\"App\">\r\n                    {todolists}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todolists: state.reducer.todolists\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTodolist: (newTodoList) => {\r\n            const action = addTodolist(newTodoList);\r\n            dispatch(action);\r\n        },\r\n        setTodolists: (todolists) => {\r\n            const action = setTodolist(todolists);\r\n            dispatch(action);\r\n        }\r\n    }\r\n};\r\n\r\nconst ConnectedItem = connect(mapStateToProps, mapDispatchToProps)(Item);\r\n\r\nexport default ConnectedItem;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ConnectedItem from \"./components/Item/Item\";\r\nimport Login from \"./components/Login/Login\";\r\n\r\nclass App extends React.Component {\r\n\r\n    /*componentDidMount() {\r\n        this.restoreState();\r\n    };\r\n\r\n    state = {\r\n        newTodoListId: 0\r\n    };*/\r\n    /*saveState = () => {\r\n        let stateAsString = JSON.stringify(this.state);\r\n        localStorage.setItem('our-itemsState-' + this.state.todolists.id, stateAsString);\r\n    };*/\r\n\r\n    /*_restoreState = () => {\r\n        let state = {\r\n            todolists: [],\r\n            newTodoListId: 0\r\n        };\r\n        let stateAsString = localStorage.getItem('our-itemsState-' + this.props.todolists.id);\r\n        if (stateAsString != null) {\r\n            state = JSON.parse(stateAsString);\r\n        }\r\n        this.setState(state);\r\n    };*/\r\n\r\n   /* restoreState = () => {\r\n        api.getTodolists()\r\n            .then(res => {\r\n                this.props.setTodolists(res.data);\r\n            });\r\n    };\r\n\r\n    addTodolist = (title)=> {\r\n        api.createTodolists(title)\r\n            .then(res => {\r\n                let todolists = res.data.data.item;\r\n                this.props.addTodolist(todolists);\r\n            });*/\r\n        /*let newTodoList = {\r\n            id: this.props.todolists.length + 1,\r\n            title: title/!*,\r\n            tasks: []*!/\r\n        };\r\n        this.props.addTodolist(newTodoList)*/\r\n    // };\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className='appWrapper'>\r\n                <ConnectedItem />\r\n                {/*<Login />*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport './Login.css';\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\nexport let LoginForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={'input'} name={'login'} />\r\n        <Field component={'input'} name={'password'} />\r\n        <Field component={'input'} type={'checkbox'} name={'rememberMe'} />\r\n        <button>Send</button>\r\n    </form>\r\n};\r\n\r\nlet Login = () => {\r\n\r\n    let onSubmit = (formData) => {\r\n        console.log(formData);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>Login</div>\r\n            <LoginReducerForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport let LoginReducerForm = reduxForm({\r\nform: 'login'\r\n})(LoginForm);\r\n\r\n\r\nexport default Login;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./store\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/basket.491ecf80.svg\";"],"sourceRoot":""}