{"version":3,"sources":["images/basket.svg","components/TodoListHeader/TodoListTitle.jsx","components/TodoListTasks/TodoListTask.jsx","components/TodoListTasks/TodoListTasks.jsx","components/TodoListFooter/TodoListFooter.jsx","components/TodoListHeader/AddNewItemForm.jsx","redux/reducer.js","dal/api.js","components/TodoList/TodoList.jsx","App.js","serviceWorker.js","store.js","index.js"],"names":["module","exports","__webpack_require__","p","React","Component","TodoListTask","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editMode","title","task","activateEditMode","setState","deactiveEditMode","changeTitle","id","onIsDoneChanged","e","status","currentTarget","checked","changeIsDoneStatus","onTitleChanged","value","onDeleteTask","deleteTask","render","toDoListDoneClass","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","src","basket","alt","TodoListTasks","tasksElement","tasks","map","components_TodoListTasks_TodoListTask","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onComplitedFilterClick","onActiveFilterClick","onHideFilterClick","onShowFilterClick","classForAll","filterValue","classForCompleted","classForActive","AddNewItemForm","error","onInputTextChange","onAddNewItemTitle","newTitle","addNewTitle","onPressEnter","errorInput","placeholder","onKeyPress","ADD_TASK","initState","todolists","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","createTask","newTaskTitle","todolistId","post","concat","getTasks","taskId","get","updateTask","obj","put","objectSpread2","delete","deleteTodolist","getTodolists","createTodolists","newTodolistTitle","updateTodolist","TodoList","nextTaskId","restoreState","then","res","allTasks","data","items","setTasks","addTask","newTask","item","newFilterValue","changeTask","forEach","t","changeTodolist","_this$props$tasks","weekDay","day","month","TodoListHeader_AddNewItemForm","components_TodoListTasks_TodoListTasks","filter","components_TodoListFooter_TodoListFooter","Date","toLocaleString","weekday","TodoListConnected","connect","dispatch","action","App","newTodoListId","setTodolists","addTodolist","components_TodoList_TodoList","ConnectedApp","newTodoList","setTodolist","Boolean","window","location","hostname","match","store","createStore","arguments","length","undefined","toConsumableArray","todo","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gTCEZC,IAAMC,gCCwEnBC,cApEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGVQ,MAAQ,CACJC,UAAU,EACVC,MAAOT,EAAKD,MAAMW,KAAKD,OANRT,EASnBW,iBAAmB,WACfX,EAAKY,SAAS,CACVJ,UAAU,KAXCR,EAenBa,iBAAmB,WACfb,EAAKD,MAAMe,YAAYd,EAAKD,MAAMW,KAAKK,GAAIf,EAAKO,MAAME,OACtDT,EAAKY,SAAS,CACVJ,UAAU,KAlBCR,EAsBnBgB,gBAAkB,SAACC,GACf,IAAIC,EAASD,EAAEE,cAAcC,QAAU,EAAI,EAC3CpB,EAAKD,MAAMsB,mBAAmBrB,EAAKD,MAAMW,KAAKK,GAAIG,IAxBnClB,EA2BnBsB,eAAiB,SAACL,GACdjB,EAAKY,SAAS,CAACH,MAAOQ,EAAEE,cAAcI,SA5BvBvB,EA+BnBwB,aAAe,WACXxB,EAAKD,MAAM0B,WAAWzB,EAAKD,MAAMW,KAAKK,KAhCvBf,EAmCnB0B,OAAS,WAEL,IAAIC,EAAoB3B,EAAKD,MAAMW,KAAKQ,OAAY,OAAW,GAU/D,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEPH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWjB,GAAG,QAAQK,QAAoC,IAA3BpB,EAAKD,MAAMW,KAAKQ,OAAce,SAAUjC,EAAKgB,kBAG5FY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,WACK9B,EAAKO,MAAMC,SACNoB,EAAAC,EAAAC,cAAA,SAAOI,OAAQlC,EAAKa,iBAAkBoB,SAAUjC,EAAKsB,eAC9Ca,WAAW,EAAMZ,MAAOvB,EAAKO,MAAME,QAC1CmB,EAAAC,EAAAC,cAAA,QAAMM,QAASpC,EAAKW,iBAAkBoB,UAAWJ,GAAoB3B,EAAKD,MAAMW,KAAKD,QAG/FmB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAqBK,QAASpC,EAAKwB,cAAcI,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAQC,IAAI,eA7DtFvC,6BAFIJ,IAAMC,WCsBlB2C,cArBX,SAAAA,EAAYzC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IACfxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KAGV2B,OAAS,WAEL,IAAIe,EAAezC,EAAKD,MAAM2C,MAAMC,IAAI,SAAAjC,GAAI,OACxCkB,EAAAC,EAAAC,cAACc,EAAD,CAAcC,IAAKnC,EAAKK,GACVL,KAAMA,EACNW,mBAAoBrB,EAAKD,MAAMsB,mBAC/BP,YAAad,EAAKD,MAAMe,YACxBW,WAAYzB,EAAKD,MAAM0B,eAEzC,OACIG,EAAAC,EAAAC,cAAA,WACKW,IAfMzC,6BAFKJ,IAAMC,WCsDnBiD,oNApDXvC,MAAQ,CACJwC,UAAU,KAGdC,iBAAmB,WACfhD,EAAKD,MAAMkD,aAAa,UAG5BC,uBAAyB,WACrBlD,EAAKD,MAAMkD,aAAa,gBAG5BE,oBAAsB,WAClBnD,EAAKD,MAAMkD,aAAa,aAG5BG,kBAAoB,WAChBpD,EAAKY,SAAS,CACVmC,UAAU,OAIlBM,kBAAoB,WAChBrD,EAAKY,SAAS,CACVmC,UAAU,OAIlBrB,OAAS,WAEL,IAAI4B,EAAyC,QAA3BtD,EAAKD,MAAMwD,YAAwB,eAAiB,GAClEC,EAA+C,cAA3BxD,EAAKD,MAAMwD,YAA8B,eAAiB,GAC9EE,EAA4C,WAA3BzD,EAAKD,MAAMwD,YAA2B,eAAiB,GAE5E,OACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACT/B,EAAKO,MAAMwC,UACbnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQM,QAAU,WAAOpC,EAAKgD,oBACtBjB,UAAWuB,GADnB,OAEA1B,EAAAC,EAAAC,cAAA,UAAQM,QAAU,WAAOpC,EAAKkD,0BACtBnB,UAAWyB,GADnB,aAEA5B,EAAAC,EAAAC,cAAA,UAAQM,QAAU,WAAOpC,EAAKmD,uBACtBpB,UAAW0B,GADnB,YAGFzD,EAAKO,MAAMwC,UAAYnB,EAAAC,EAAAC,cAAA,QAAMM,QAAS,WAAOpC,EAAKoD,sBAA3B,QACxBpD,EAAKO,MAAMwC,UAAYnB,EAAAC,EAAAC,cAAA,QAAMM,QAAS,WAAOpC,EAAKqD,sBAA3B,uCAhDXzD,IAAMC,YCyDpB6D,cAnDX,SAAAA,EAAY3D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,IACf1D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyD,GAAApD,KAAAH,KAAMJ,KANVQ,MAAQ,CACJoD,OAAO,EACPlD,MAAO,IAGQT,EAInB4D,kBAAoB,SAAC3C,GACjBjB,EAAKY,SAAS,CACV+C,OAAO,EACPlD,MAAOQ,EAAEE,cAAcI,SAPZvB,EAWnB6D,kBAAoB,WAChB,IAAIC,EAAW9D,EAAKO,MAAME,MAC1BT,EAAKY,SAAS,CAACH,MAAO,KACL,KAAbqD,EACA9D,EAAKY,SAAS,CACV+C,OAAO,KAGX3D,EAAKY,SAAS,CACV+C,OAAO,IAEX3D,EAAKD,MAAMgE,YAAYD,KAtBZ9D,EA0BnBgE,aAAe,SAAC/C,GACE,UAAVA,EAAE4B,KACF7C,EAAK6D,qBA5BM7D,EAgCnB0B,OAAS,WACL,IAAIuC,EAAajE,EAAKO,MAAMoD,MAAQ,QAAU,GAC9C,OACI/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOkC,YAAY,gBACxBnC,UAAWkC,EACXhC,SAAUjC,EAAK4D,kBACfO,WAAYnE,EAAKgE,aACjBzC,MAAOvB,EAAKO,MAAME,QACzBmB,EAAAC,EAAAC,cAAA,UAAQM,QAAS,WAAOpC,EAAK6D,sBAA7B,UA1CG7D,6BAPMJ,IAAMC,yCCEtBuE,EAAW,4BAalBC,EAAY,CACdC,UAAW,YChBTC,SAAWC,EAAMC,OAAO,CAC1BC,QAAS,+CACTC,iBAAiB,EACjBC,QAAS,CAACC,UAAW,0CAGZC,EAAM,CACfC,WADe,SACJC,EAAcC,GAGrB,OAFcV,EAASW,KAAT,eAAAC,OAA6BF,EAA7B,UACV,CAACxE,MAAOuE,KAGhBI,SANe,SAMNC,GAEL,OADcd,EAASe,IAAT,eAAAH,OAA4BE,EAA5B,YAGlBE,WAVe,SAUJ7E,EAAM8E,GAEb,OADcjB,EAASkB,IAAI,oBAAbxF,OAAAyF,EAAA,EAAAzF,CAAA,GAAqCS,EAArC,GAA8C8E,KAGhE/D,WAde,SAcJ4D,GAEP,OADcd,EAASoB,OAAT,qBAAAR,OAAqCE,KAGvDO,eAlBe,SAkBAX,GAEX,OADcV,EAASoB,OAAT,eAAAR,OAA+BF,KAGjDY,aAtBe,WAwBX,OADctB,EAASe,IAAI,gBAG/BQ,gBA1Be,SA0BCC,GAEZ,OADcxB,EAASW,KAAK,cAAc,CAACzE,MAAOsF,KAGtDC,eA9Be,SA8BAf,EAAYc,GAEvB,OADcxB,EAASkB,IAAT,eAAAN,OAA4BF,GAAc,CAACxE,MAAOsF,MCvBlEE,cAEF,SAAAA,EAAYlG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8F,IACfjG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgG,GAAA3F,KAAAH,KAAMJ,KAUVQ,MAAQ,CACJgD,YAAa,MACb2C,WAAY,GAbGlG,EAgBnBmG,aAAe,WACXrB,EAAIM,SAASpF,EAAKD,MAAMgB,IACnBqF,KAAK,SAAAC,GACF,IAAIC,EAAWD,EAAIE,KAAKC,MACxBxG,EAAKD,MAAM0G,SAASH,EAAUtG,EAAKD,MAAMgB,OApBlCf,EAwBnB0G,QAAU,SAAC5C,GACPgB,EAAIC,WAAWjB,EAAU9D,EAAKD,MAAMgB,IAC/BqF,KAAK,SAAAC,GACF,IAAIM,EAAUN,EAAIE,KAAKA,KAAKK,KAC5B5G,EAAKD,MAAM2G,QAAQC,EAAS3G,EAAKD,MAAMgB,OA5BhCf,EAgCnBiD,aAAe,SAAC4D,GACZ7G,EAAKY,SAAS,CACV2C,YAAasD,KAlCF7G,EAsCnB8G,WAAa,SAACzB,EAAQG,GAClBxF,EAAKD,MAAM2C,MAAMqE,QAAQ,SAAAC,GAEjBA,EAAEjG,KAAOsE,GACTP,EAAIS,WAAWyB,EAAGxB,GACbY,KAAK,SAAAC,GACFrG,EAAKD,MAAM+G,WAAW9G,EAAKD,MAAMgB,GAAIsE,EAAQG,QA5C9CxF,EAkDnBiH,eAAiB,SAAChC,EAAYc,GAC1BjB,EAAIkB,eAAehG,EAAKD,MAAMgB,GAAIgF,GAC7BK,KAAK,SAAAC,GACFrG,EAAKD,MAAMkH,eAAejH,EAAKD,MAAMgB,GAAIf,EAAKD,MAAMU,UArD7CT,EAyDnBqB,mBAAqB,SAACgE,EAAQnE,GAC1BlB,EAAK8G,WAAWzB,EAAQ,CAACnE,OAAQA,KA1DlBlB,EA6DnBc,YAAc,SAACuE,EAAQ5E,GACnBT,EAAK8G,WAAWzB,EAAQ,CAAC5E,MAAOA,KA9DjBT,EAiEnByB,WAAa,SAAC4D,GACVP,EAAIrD,WAAW4D,GACVe,KAAK,SAAAC,GACFrG,EAAKD,MAAM0B,WAAWzB,EAAKD,MAAMgB,GAAIsE,MApE9BrF,EAwEnB4F,eAAiB,WACbd,EAAIc,eAAe5F,EAAKD,MAAMgB,IACzBqF,KAAK,SAAAC,GACFrG,EAAKD,MAAM6F,eAAe5F,EAAKD,MAAMgB,OA3E9Bf,EA+EnB0B,OAAS,WAAM,IAAAwF,EAEQlH,EAAKD,MAAnB2C,aAFM,IAAAwE,EAEE,GAFFA,EAIX,OACItF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAMC,UAAU,uBAAhB,GAAAoD,OAA0CnF,EAAKmH,QAA/C,MAA2DvF,EAAAC,EAAAC,cAAA,YAAO9B,EAAKoH,MACvExF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqB/B,EAAKqH,QAG7CzF,EAAAC,EAAAC,cAAA,UAAQM,QAAS,WACbpC,EAAK4F,kBACN7D,UAAU,wBAAuBH,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAQC,IAAI,cAIlEX,EAAAC,EAAAC,cAACwF,EAAD,CAAgBvD,YAAa/D,EAAK0G,UAClC9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACyF,EAAD,CAAelG,mBAAoBrB,EAAKqB,mBACzBP,YAAad,EAAKc,YAClBgG,WAAY9G,EAAK8G,WACjBrF,WAAYzB,EAAKyB,WACjBiB,MAAOA,EAAM8E,OAAO,SAAAR,GAChB,MAA+B,QAA3BhH,EAAKO,MAAMgD,YACJ,EAC2B,WAA3BvD,EAAKO,MAAMgD,YACE,IAAbyD,EAAE9F,OAEW,IAAb8F,EAAE9F,YAepCU,EAAAC,EAAAC,cAAC2F,EAAD,CAAgBxE,aAAcjD,EAAKiD,aAAcM,YAAavD,EAAKO,MAAMgD,iBA9HtEvD,mFAKfG,KAAKgG,eACLhG,KAAKgH,SAAU,IAAIO,MAAOC,eAAe,KAAM,CAACC,QAAS,SACzDzH,KAAKiH,KAAM,IAAIM,MAAOC,eAAe,KAAM,CAACP,IAAK,YACjDjH,KAAKkH,OAAQ,IAAIK,MAAOC,eAAe,KAAM,CAACN,MAAO,gBAVtCzH,IAAMC,WAsKdgI,EAFWC,YAAQ,KA7BP,SAACC,GACxB,MAAO,CACHrB,QAAS,SAACC,EAAS1B,GACf,IAAM+C,EFrJK,SAACrB,EAAS1B,GAAV,MAA0B,CAACjD,KAAMoC,EAAUuC,UAAS1B,cEqJhDyB,CAAQC,EAAS1B,GAChC8C,EAASC,IAEbvB,SAAU,SAAC/D,EAAOuC,GACd,IAAM+C,EFjJM,SAACtF,EAAOuC,GAAR,MAAwB,CAACjD,KADxB,6BACyCU,QAAOuC,cEiJ9CwB,CAAS/D,EAAOuC,GAC/B8C,EAASC,IAEblB,WAAY,SAAC7B,EAAYI,EAAQG,GAC7B,IAAMwC,EF3JQ,SAAC/C,EAAYI,EAAQG,GAArB,MAA8B,CAACxD,KAD9B,+BACiDiD,aAAYI,SAAQG,OE2JrEsB,CAAW7B,EAAYI,EAAQG,GAC9CuC,EAASC,IAEbpC,eAAgB,SAACX,GACb,IAAM+C,EFnKY,SAAC/C,GAAD,MAAiB,CAACjD,KADjB,mCACwCiD,cEmK5CW,CAAeX,GAC9B8C,EAASC,IAEbvG,WAjBG,SAiBQwD,EAAYI,GACnB,IAAM2C,EFjKQ,SAAC/C,EAAYI,GAAb,MAAyB,CAACrD,KADzB,+BAC4CiD,aAAYI,UEiKxD5D,CAAWwD,EAAYI,GACtC0C,EAASC,IAEbf,eArBG,SAqBYhC,EAAYc,GACvB,IAAMiC,EF/JY,SAAC/C,EAAYc,GAAb,MAAmC,CAAC/D,KADnC,mCAC0DiD,aAAYc,oBE+J1EkB,CAAehC,EAAYc,GAC1CgC,EAASC,MAKKF,CAAkC7B,GC5KtDgC,6MAMF1H,MAAQ,CACJ2H,cAAe,KAmBnB/B,aAAe,WACXrB,EAAIe,eACCO,KAAK,SAAAC,GACFrG,EAAKD,MAAMoI,aAAa9B,EAAIE,WAIxC6B,YAAc,SAAC3H,GACXqE,EAAIgB,gBAAgBrF,GACf2F,KAAK,SAAAC,GACF,IAAI/B,EAAY+B,EAAIE,KAAKA,KAAKK,KAC9B5G,EAAKD,MAAMqI,YAAY9D,QAUnC5C,OAAS,WACL,IAAM4C,EAAYtE,EAAKD,MAAMuE,UAAU3B,IAAI,SAAAqE,GACvC,OAAOpF,EAAAC,EAAAC,cAACuG,EAAD,CAAUxF,IAAKmE,EAAEjG,GAAIA,GAAIiG,EAAEjG,GAAIN,MAAOuG,EAAEvG,MAAOiC,MAAOsE,EAAEtE,UAGnE,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwF,EAAD,CAAgBvD,YAAa/D,EAAKoI,eAEtCxG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVuC,wFAvDbnE,KAAKgG,sBAHKvG,IAAMC,WAsFTyI,EAFMR,YAnBG,SAACvH,GACrB,MAAO,CACH+D,UAAW/D,EAAM+D,YAIE,SAACyD,GACxB,MAAO,CACHK,YAAa,SAACG,GACV,IAAMP,EHjFS,SAACO,GAAD,MAAkB,CAACvG,KADlB,gCACsCuG,eGiFvCH,CAAYG,GAC3BR,EAASC,IAEbG,aAAc,SAAC7D,GACX,IAAM0D,EH3ES,SAAC1D,GAAD,MAAgB,CAACtC,KADf,iCACoCsC,aG2EtCkE,CAAYlE,GAC3ByD,EAASC,MAKAF,CAA6CG,GChF9CQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECdAC,EAAQC,YLiBS,WAA+B,IAA9BxI,EAA8ByI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB3E,EAAW2D,EAAWgB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAQlB,EAAOhG,MACX,IAvBoB,gCAwBhB,OAAO/B,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI+D,UAAS,GAAAa,OAAAlF,OAAAkJ,EAAA,EAAAlJ,CAAMM,EAAM+D,WAAZ,CAAuB0D,EAAOO,gBAE/C,IAlBqB,iCAmBjB,OAAOtI,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI+D,UAAW0D,EAAO1D,UAAU3B,IAAK,SAAAqE,GAAC,OAAA/G,OAAAyF,EAAA,EAAAzF,CAAA,GAAS+G,EAAT,CAAYtE,MAAO,SAE7D,IA/BuB,mCAgCnB,OAAOzC,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI+D,UAAW/D,EAAM+D,UAAUkD,OAAO,SAAAR,GAC9B,OAAOA,EAAEjG,KAAOiH,EAAO/C,eAGnC,KAAKb,EACD,OAAOnE,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI+D,UAAW/D,EAAM+D,UAAU3B,IAAI,SAAAqE,GAC3B,OAAIA,EAAEjG,KAAOiH,EAAO/C,WACThF,OAAAyF,EAAA,EAAAzF,CAAA,GAAI+G,EAAX,CAActE,MAAK,GAAAyC,OAAAlF,OAAAkJ,EAAA,EAAAlJ,CAAM+G,EAAEtE,OAAR,CAAesF,EAAOrB,YAElCK,MAIvB,IAvCiB,6BAwCb,OAAO/G,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI+D,UAAW/D,EAAM+D,UAAU3B,IAAK,SAAAqE,GAC5B,OAAGA,EAAEjG,KAAOiH,EAAO/C,WACRhF,OAAAyF,EAAA,EAAAzF,CAAA,GAAI+G,EAAX,CAActE,MAAOsF,EAAOtF,QAErBsE,MAIvB,IAxDmB,+BAyDf,OAAO/G,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI+D,UAAW/D,EAAM+D,UAAU3B,IAAK,SAAAyG,GAC5B,OAAIA,EAAKrI,KAAOiH,EAAO/C,WACZhF,OAAAyF,EAAA,EAAAzF,CAAA,GACAmJ,EADP,CAEI1G,MAAO0G,EAAK1G,MAAMC,IAAK,SAAAjC,GACnB,OAAIA,EAAKK,KAAOiH,EAAO3C,OACZpF,OAAAyF,EAAA,EAAAzF,CAAA,GAAIS,EAAX,GAAoBsH,EAAOxC,KAEpB9E,MAKZ0I,MAIvB,IApEuB,mCAqEnB,OAAOnJ,OAAAyF,EAAA,EAAAzF,CAAA,GACFM,EADL,CAEE+D,UAAW/D,EAAM+D,UAAU3B,IAAK,SAAAyG,GAC5B,OAAGA,EAAKrI,KAAOiH,EAAO/C,WACXhF,OAAAyF,EAAA,EAAAzF,CAAA,GAAImJ,GAEJA,MAIrB,IArFmB,+BAsFf,OAAOnJ,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI+D,UAAW/D,EAAM+D,UAAU3B,IAAK,SAAAyG,GAC5B,OAAGA,EAAKrI,KAAOiH,EAAO/C,WACXhF,OAAAyF,EAAA,EAAAzF,CAAA,GACAmJ,EADP,CAEI1G,MAAO0G,EAAK1G,MAAM8E,OAAQ,SAAA9G,GACtB,OAAOA,EAAKK,KAAOiH,EAAO3C,WAI3B+D,MAIvB,QACI,OAAO7I,KKzGnBmI,OAAOI,MAAQA,EAEAA,QCCfO,IAAS3H,OACLE,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CAAUR,MAAOA,GACblH,EAAAC,EAAAC,cAACyH,EAAD,OACSC,SAASC,eAAe,SFsHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.3a9a52c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/basket.491ecf80.svg\";","import React from 'react';\r\n\r\nclass TodoListTitle extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        title: this.props.title,\r\n        editMode: false\r\n    };\r\n\r\n    activeEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactiveEditMode = () => {\r\n        this.props.changeTodolist(this.props.id, this.state.title);\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    };\r\n\r\n    changeTodolistTitle = (e) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                {this.state.editMode\r\n                ? <input onBlur={this.deactiveEditMode} autoFocus={true} value={this.state.title}\r\n                    onChange={this.changeTodolistTitle} className='todolistTitleInput'/>\r\n                : <h3 className=\"todolistHeaderTitle\" onClick={this.activeEditMode}>{this.state.title}</h3>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;","import React from 'react';\r\nimport './TodoListTask.css';\r\nimport basket from '../../images/basket.svg';\r\n\r\nclass TodoListTask extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    };\r\n\r\n    deactiveEditMode = () => {\r\n        this.props.changeTitle(this.props.task.id, this.state.title);\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n    };\r\n\r\n    onIsDoneChanged = (e) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeIsDoneStatus(this.props.task.id, status);\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    onDeleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let toDoListDoneClass = this.props.task.status ? `${'done'}` : '';\r\n        /*let priorityTitle = '';\r\n        switch(this.props.task.priority){\r\n            case 0: priorityTitle = \"Low\"; break;\r\n            case 1: priorityTitle = \"Middle\"; break;\r\n            case 2: priorityTitle = \"High\"; break;\r\n            case 3: priorityTitle = \"Urgently\"; break;\r\n            case 4: priorityTitle = \"Later\"; break;\r\n        }*/\r\n\r\n        return (\r\n            <div className='todoListTask'>\r\n                {/*<div className='toDoListCheck'>*/}\r\n                    <input type=\"checkbox\" id='check' checked={this.props.task.status === 2} onChange={this.onIsDoneChanged}/>\r\n                    {/*<label htmlFor=\"check\"></label>*/}\r\n                {/*</div>*/}\r\n                <div className='todoListTaskItem'>\r\n                    <div>\r\n                        {this.state.editMode\r\n                            ? <input onBlur={this.deactiveEditMode} onChange={this.onTitleChanged}\r\n                                     autoFocus={true} value={this.state.title}/>\r\n                            : <span onClick={this.activateEditMode} className={toDoListDoneClass}>{this.props.task.title}\r\n                                {/*; priority: {priorityTitle}*/}</span>}\r\n                    </div>\r\n                    <button className='todoListTaskDelete' onClick={this.onDeleteTask}><img src={basket} alt=\"basket\"/></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask\";\r\n\r\nclass TodoListTasks extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render = () => {\r\n\r\n        let tasksElement = this.props.tasks.map(task =>\r\n            <TodoListTask key={task.id}\r\n                          task={task}\r\n                          changeIsDoneStatus={this.props.changeIsDoneStatus}\r\n                          changeTitle={this.props.changeTitle}\r\n                          deleteTask={this.props.deleteTask} />);\r\n\r\n        return (\r\n            <div>\r\n                {tasksElement}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;","import React from 'react';\r\nimport './TodoListFooter.css'\r\n\r\nclass TodoListFooter extends React.Component{\r\n\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All');\r\n    };\r\n\r\n    onComplitedFilterClick = () => {\r\n        this.props.changeFilter('Completed');\r\n    };\r\n\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active');\r\n    };\r\n\r\n    onHideFilterClick = () => {\r\n        this.setState({\r\n            isHidden: true\r\n        })\r\n    };\r\n\r\n    onShowFilterClick = () => {\r\n        this.setState({\r\n            isHidden: false\r\n        })\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === 'All' ? 'filterActive' : '';\r\n        let classForCompleted = this.props.filterValue === 'Completed' ? 'filterActive' : '';\r\n        let classForActive = this.props.filterValue === 'Active' ? 'filterActive' : '';\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {!this.state.isHidden &&\r\n                <div>\r\n                    <button onClick= {() => {this.onAllFilterClick()}}\r\n                            className={classForAll}>All</button>\r\n                    <button onClick= {() => {this.onComplitedFilterClick()}}\r\n                            className={classForCompleted}>Completed</button>\r\n                    <button onClick= {() => {this.onActiveFilterClick()}}\r\n                            className={classForActive}>Active</button>\r\n                </div>}\r\n                {!this.state.isHidden && <span onClick={() => {this.onHideFilterClick()}}>hide</span>}\r\n                {this.state.isHidden && <span onClick={() => {this.onShowFilterClick()}}>show</span>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;","import React from 'react';\r\n\r\nclass AddNewItemForm extends React.Component {\r\n\r\n    state = {\r\n        error: false,\r\n        title: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    onInputTextChange = (e) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        })\r\n    };\r\n\r\n    onAddNewItemTitle = () => {\r\n        let newTitle = this.state.title;\r\n        this.setState({title: ''});\r\n        if (newTitle === '') {\r\n            this.setState({\r\n                error: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                error: false\r\n            });\r\n            this.props.addNewTitle(newTitle);\r\n        }\r\n    };\r\n\r\n    onPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddNewItemTitle();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        let errorInput = this.state.error ? 'error' : '';\r\n        return (\r\n            <div className=\"todoList-header\">\r\n                <div className=\"todoList-newTaskForm\">\r\n                    <input type=\"text\" placeholder=\"New item name\"\r\n                           className={errorInput}\r\n                           onChange={this.onInputTextChange}\r\n                           onKeyPress={this.onPressEnter}\r\n                           value={this.state.title}/>\r\n                    <button onClick={() => {this.onAddNewItemTitle()}\r\n                    }>Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","export const ADD_TODOLIST = 'TodoList/Reducer/ADD_TODOLIST';\r\nexport const addTodolist = (newTodoList) => ({type: ADD_TODOLIST, newTodoList});\r\nexport const DELETE_TODOLIST = 'TodoList/Reducer/DELETE_TODOLIST';\r\nexport const deleteTodolist = (todolistId) => ({type: DELETE_TODOLIST, todolistId});\r\nexport const ADD_TASK = 'TodoList/Reducer/ADD_TASK';\r\nexport const addTask = (newTask, todolistId) => ({type: ADD_TASK, newTask, todolistId});\r\nexport const CHANGE_TASK = 'TodoList/Reducer/CHANGE_TASK';\r\nexport const changeTask = (todolistId, taskId, obj) => ({type: CHANGE_TASK, todolistId, taskId, obj});\r\nexport const DELETE_TASK = 'TodoList/Reducer/DELETE_TASK';\r\nexport const deleteTask = (todolistId, taskId) => ({type: DELETE_TASK, todolistId, taskId});\r\nexport const SET_TODOLISTS = 'TodoList/Reducer/SET_TODOLISTS';\r\nexport const setTodolist = (todolists) => ({type: SET_TODOLISTS, todolists});\r\nexport const SET_TASKS = 'TodoList/Reducer/SET_TASKS';\r\nexport const setTasks = (tasks, todolistId) => ({type: SET_TASKS, tasks, todolistId});\r\nexport const CHANGE_TODOLIST = 'TodoList/Reducer/CHANGE_TODOLIST';\r\nexport const changeTodolist = (todolistId, newTodolistTitle) => ({type: CHANGE_TODOLIST, todolistId, newTodolistTitle});\r\n\r\nconst initState = {\r\n    todolists: []\r\n};\r\n\r\nexport const reducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodoList]\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map( t => ({...t, tasks: []}))\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(t => {\r\n                    return t.id !== action.todolistId\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {...t, tasks: [...t.tasks, action.newTask]}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map( t => {\r\n                    if(t.id === action.todolistId){\r\n                        return {...t, tasks: action.tasks}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map( todo => {\r\n                    if (todo.id === action.todolistId) {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.map( task => {\r\n                                if (task.id === action.taskId) {\r\n                                    return {...task, ...action.obj};\r\n                                } else {\r\n                                    return task;\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TODOLIST:\r\n            return {\r\n              ...state,\r\n              todolists: state.todolists.map( todo => {\r\n                  if(todo.id === action.todolistId){\r\n                      return {...todo, }\r\n                  } else {\r\n                      return todo\r\n                  }\r\n              })\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map( todo => {\r\n                    if(todo.id === action.todolistId){\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.filter( task => {\r\n                                return task.id !== action.taskId\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '2a70584b-20f7-4ff5-8c15-684fb9f4be7b'}\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle, todolistId) {\r\n        let promise = instance.post(`/todo-lists/${todolistId}/tasks`,\r\n            {title: newTaskTitle});\r\n        return promise;\r\n    },\r\n    getTasks(taskId) {\r\n        let promise = instance.get(`/todo-lists/${taskId}/tasks`);\r\n        return promise;\r\n    },\r\n    updateTask(task, obj) {\r\n        let promise = instance.put('/todo-lists/tasks',{...task, ...obj});\r\n        return promise;\r\n    },\r\n    deleteTask(taskId) {\r\n        let promise = instance.delete(`/todo-lists/tasks/${taskId}`);\r\n        return promise;\r\n    },\r\n    deleteTodolist(todolistId) {\r\n        let promise = instance.delete(`/todo-lists/${todolistId}`);\r\n        return promise;\r\n    },\r\n    getTodolists() {\r\n        let promise = instance.get('/todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolists(newTodolistTitle) {\r\n        let promise = instance.post('/todo-lists',{title: newTodolistTitle});\r\n        return promise;\r\n    },\r\n    updateTodolist(todolistId, newTodolistTitle) {\r\n        let promise = instance.put(`/todo-lists/${todolistId}`, {title: newTodolistTitle});\r\n        return promise;\r\n    }\r\n};","import React from 'react';\r\nimport TodoListTitle from \"../TodoListHeader/TodoListTitle\";\r\nimport TodoListTasks from \"../../components/TodoListTasks/TodoListTasks\";\r\nimport TodoListFooter from \"../../components/TodoListFooter/TodoListFooter\";\r\nimport AddNewItemForm from \"../TodoListHeader/AddNewItemForm\";\r\nimport {connect} from 'react-redux';\r\nimport './TodoList.css';\r\nimport {\r\n    addTask,\r\n    changeTask, changeTodolist,\r\n    deleteTask,\r\n    deleteTodolist, setTasks\r\n} from \"../../redux/reducer\";\r\nimport {api} from \"../../dal/api\";\r\nimport basket from \"../../images/basket.svg\";\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n        this.weekDay = new Date().toLocaleString('ru', {weekday: 'long'});\r\n        this.day = new Date().toLocaleString('ru', {day: 'numeric'});\r\n        this.month = new Date().toLocaleString('ru', {month: 'long'});\r\n    };\r\n\r\n    state = {\r\n        filterValue: 'All',\r\n        nextTaskId: 3\r\n    };\r\n\r\n    restoreState = () => {\r\n        api.getTasks(this.props.id)\r\n            .then(res => {\r\n                let allTasks = res.data.items;\r\n                this.props.setTasks(allTasks, this.props.id);\r\n            });\r\n    };\r\n\r\n    addTask = (newTitle) => {\r\n        api.createTask(newTitle, this.props.id)\r\n            .then(res => {\r\n                let newTask = res.data.data.item;\r\n                this.props.addTask(newTask, this.props.id);\r\n            });\r\n    };\r\n\r\n    changeFilter = (newFilterValue) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        })\r\n    };\r\n\r\n    changeTask = (taskId, obj) => {\r\n        this.props.tasks.forEach(t => {\r\n\r\n            if (t.id === taskId) {\r\n                api.updateTask(t, obj)\r\n                    .then(res => {\r\n                        this.props.changeTask(this.props.id, taskId, obj)\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    changeTodolist = (todolistId, newTodolistTitle) => {\r\n        api.updateTodolist(this.props.id, newTodolistTitle)\r\n            .then(res => {\r\n                this.props.changeTodolist(this.props.id, this.props.title);\r\n            })\r\n    };\r\n\r\n    changeIsDoneStatus = (taskId, status) => {\r\n        this.changeTask(taskId, {status: status})\r\n    };\r\n\r\n    changeTitle = (taskId, title) => {\r\n        this.changeTask(taskId, {title: title})\r\n    };\r\n\r\n    deleteTask = (taskId) => {\r\n        api.deleteTask(taskId)\r\n            .then(res => {\r\n                this.props.deleteTask(this.props.id, taskId);\r\n            });\r\n    };\r\n\r\n    deleteTodolist = () => {\r\n        api.deleteTodolist(this.props.id)\r\n            .then(res => {\r\n                this.props.deleteTodolist(this.props.id);\r\n            });\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let {tasks = []} = this.props;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"todoList\">\r\n                    <div className=\"todoListHeader\">\r\n                        <div className='todoListTitle'>\r\n                            <div className='todoListDate'>\r\n                                <div  className='todoListDateWeekday'>{`${this.weekDay}, `}<span>{this.day}</span></div>\r\n                                <div className='todoListDateMonth'>{this.month}</div>\r\n                            </div>\r\n                            {/*<TodoListTitle title={this.props.title} changeTodolist={this.changeTodolist}/>*/}\r\n                            <button onClick={() => {\r\n                                this.deleteTodolist()\r\n                            }} className='todoListDeleteButton'><img src={basket} alt=\"basket\"/>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <AddNewItemForm addNewTitle={this.addTask}/>\r\n                    <div className='todoListContent'>\r\n                        <TodoListTasks changeIsDoneStatus={this.changeIsDoneStatus}\r\n                                       changeTitle={this.changeTitle}\r\n                                       changeTask={this.changeTask}\r\n                                       deleteTask={this.deleteTask}\r\n                                       tasks={tasks.filter(t => {\r\n                                           if (this.state.filterValue === 'All') {\r\n                                               return 2;\r\n                                           } else if (this.state.filterValue === 'Active') {\r\n                                               return t.status === 0;\r\n                                           } else {\r\n                                               return t.status === 2;\r\n                                           }\r\n                                           /*switch (this.state.filterValue){\r\n                                               case 'All':\r\n                                                   return true;\r\n                                               case 'Active':\r\n                                                   return t.isDone === false;\r\n                                               case 'Completed':\r\n                                                   return t.isDone === true;\r\n                                               default:\r\n                                                   return false;\r\n                                                   break;\r\n                                           }*/\r\n                                       })}/>\r\n                    </div>\r\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTask: (newTask, todolistId) => {\r\n            const action = addTask(newTask, todolistId);\r\n            dispatch(action)\r\n        },\r\n        setTasks: (tasks, todolistId) => {\r\n            const action = setTasks(tasks, todolistId);\r\n            dispatch(action);\r\n        },\r\n        changeTask: (todolistId, taskId, obj) => {\r\n            const action = changeTask(todolistId, taskId, obj);\r\n            dispatch(action)\r\n        },\r\n        deleteTodolist: (todolistId) => {\r\n            const action = deleteTodolist(todolistId);\r\n            dispatch(action);\r\n        },\r\n        deleteTask(todolistId, taskId) {\r\n            const action = deleteTask(todolistId, taskId);\r\n            dispatch(action);\r\n        },\r\n        changeTodolist(todolistId, newTodolistTitle) {\r\n            const action = changeTodolist(todolistId, newTodolistTitle);\r\n            dispatch(action);\r\n        }\r\n    }\r\n};\r\n\r\nconst TodoListConnected = connect(null, mapDispatchToProps)(TodoList);\r\n\r\nexport default TodoListConnected;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./components/TodoList/TodoList\";\r\nimport AddNewItemForm from \"./components/TodoListHeader/AddNewItemForm\";\r\nimport {connect} from 'react-redux';\r\nimport {addTodolist, setTodolist} from \"./redux/reducer\";\r\nimport {api} from \"./dal/api\";\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    };\r\n\r\n    state = {\r\n        newTodoListId: 0\r\n    };\r\n    /*saveState = () => {\r\n        let stateAsString = JSON.stringify(this.state);\r\n        localStorage.setItem('our-itemsState-' + this.state.todolists.id, stateAsString);\r\n    };*/\r\n\r\n    /*_restoreState = () => {\r\n        let state = {\r\n            todolists: [],\r\n            newTodoListId: 0\r\n        };\r\n        let stateAsString = localStorage.getItem('our-itemsState-' + this.props.todolists.id);\r\n        if (stateAsString != null) {\r\n            state = JSON.parse(stateAsString);\r\n        }\r\n        this.setState(state);\r\n    };*/\r\n\r\n    restoreState = () => {\r\n        api.getTodolists()\r\n            .then(res => {\r\n                this.props.setTodolists(res.data);\r\n            });\r\n    };\r\n\r\n    addTodolist = (title)=> {\r\n        api.createTodolists(title)\r\n            .then(res => {\r\n                let todolists = res.data.data.item;\r\n                this.props.addTodolist(todolists);\r\n            });\r\n        /*let newTodoList = {\r\n            id: this.props.todolists.length + 1,\r\n            title: title/!*,\r\n            tasks: []*!/\r\n        };\r\n        this.props.addTodolist(newTodoList)*/\r\n    };\r\n\r\n    render = () => {\r\n        const todolists = this.props.todolists.map(t => {\r\n            return <TodoList key={t.id} id={t.id} title={t.title} tasks={t.tasks}/>\r\n        });\r\n\r\n        return (\r\n            <div className='appWrapper'>\r\n                <div>\r\n                    <AddNewItemForm addNewTitle={this.addTodolist}/>\r\n                </div>\r\n                <div className=\"App\">\r\n                    {todolists}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todolists: state.todolists\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTodolist: (newTodoList) => {\r\n            const action = addTodolist(newTodoList);\r\n            dispatch(action);\r\n        },\r\n        setTodolists: (todolists) => {\r\n            const action = setTodolist(todolists);\r\n            dispatch(action);\r\n        }\r\n    }\r\n};\r\n\r\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default ConnectedApp;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {createStore} from \"redux\";\r\nimport {reducer} from \"./redux/reducer\";\r\n\r\nconst store = createStore(reducer);\r\nwindow.store = store;\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport ConnectedApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedApp />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}