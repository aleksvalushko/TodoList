{"version":3,"sources":["App.module.css","serviceWorker.js","dal/api.ts","redux/reducer.ts","redux/authReducer.ts","redux/store.ts","utils/validators.ts","components/FormControl/FormControl.tsx","components/Login/Login.tsx","components/Item/TodoListTasks/TodoListTask.tsx","components/Item/TodoListTasks/TodoListTasks.tsx","components/Item/TodoListFooter/TodoListFooter.tsx","components/Item/TodoListHeader/AddNewItemForm.tsx","components/Item/TodoListHeader/TodoListTitle.tsx","components/Item/TodoList/TodoList.tsx","components/Item/Item.tsx","components/Item/ItemContainer.tsx","App.js","index.js","components/Item/TodoList/TodoList.module.sass","components/Login/Login.module.sass","components/Item/Item.module.sass","components/Item/TodoListTasks/TodoListTask.module.sass","components/Item/TodoListFooter/TodoListFooter.module.sass","images/basket.svg","components/FormControl/FormControl.module.sass","components/Item/TodoListHeader/TodoListInputForm.module.sass"],"names":["module","exports","Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","api","newTaskTitle","todolistId","post","title","taskId","get","task","obj","put","delete","newTodolistTitle","authAPI","then","response","data","email","password","rememberMe","initState","todolists","actions","type","tasks","newTask","newTodoList","setAuthUserData","userId","login","isAuth","payload","getAuthUserData","dispatch","a","resultCode","id","rootReducers","combineReducers","reducer","state","action","map","t","filter","todo","auth","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","required","value","maxLengthCreator","maxLength","length","Input","input","meta","props","hasError","touched","error","className","mod","formControl","maxLength20","maxLength40","LoginReducerForm","reduxForm","onSubmit","handleSubmit","loginForm","Field","component","name","placeholder","validate","connect","to","loginTitle","formData","testData","TodoListTask","editMode","activateEditMode","setState","deactiveEditMode","changeTitle","onIsDoneChanged","e","status","currentTarget","checked","changeIsDoneStatus","onTitleChanged","onDeleteTask","deleteTask","render","toDoListDoneClass","done","todoListTask","onChange","todoListTaskItem","onBlur","autoFocus","onClick","todoListTaskDelete","src","basket","alt","React","Component","TodoListTasks","tasksElement","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onComplitedFilterClick","onActiveFilterClick","onHideFilterClick","onShowFilterClick","classForAll","filterValue","filterActive","classForCompleted","classForActive","todoListFooter","AddNewItemForm","onInputTextChange","onAddNewItemTitle","newTitle","addNewTitle","onPressEnter","errorInput","todoListHeader","todoListNewTaskForm","onKeyPress","TodoListTitle","activeEditMode","changeTodolist","changeTodolistTitle","todolistTitleInput","todolistHeaderTitle","TodoList","nextTaskId","setTasks","loadTasks","addTask","newText","newFilterValue","changeTask","changedTask","find","deleteTodolist","alert","deactivateEditMode","App","todoList","todoListDeleteButton","todoListInput","todoListContent","this","TodoListConnected","item","addTaskTC","allTasks","items","loadTasksTC","changeTaskTC","deleteTaskTC","deleteTodolistTC","changeTodoListTC","Item","newTodoListId","addNewTodolist","addTodolist","itemHeader","logout","ItemContainer","setTodolists","ConnectedItemContainer","newTodoListTitle","thunk","appWrapper","path","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b9bc564.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__XaXhv\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport {ITask, ITodolist} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '2a70584b-20f7-4ff5-8c15-684fb9f4be7b'}\r\n});\r\n\r\ntype CommonResponseType<T> = {\r\n    data: T\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: Array<ITask>\r\n    error: null | string\r\n    totalCount: number\r\n}\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{ item: ITask }>>(`/todo-lists/${todolistId}/tasks`,\r\n            {title: newTaskTitle});\r\n    },\r\n    getTasks(taskId: string) {\r\n        return instance.get<GetTasksResponseType>(`/todo-lists/${taskId}/tasks`);\r\n    },\r\n    updateTask(task: ITask, obj: any) {\r\n        return instance.put<CommonResponseType<{\r\n            task: ITask\r\n            obj: {\r\n                title: string\r\n            }\r\n        }>>('/todo-lists/tasks', {...task, ...obj});\r\n    },\r\n    deleteTask(taskId: string) {\r\n        return instance.delete <CommonResponseType<{ taskId: string }>>(`/todo-lists/tasks/${taskId}`);\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete <CommonResponseType<{ todolistId: string }>>(`/todo-lists/${todolistId}`);\r\n    },\r\n    getTodolists() {\r\n        return instance.get<Array<ITodolist>>('/todo-lists');\r\n    },\r\n    createTodolists(newTodolistTitle: string) {\r\n        return instance.post <CommonResponseType<{ item: ITodolist }>>('/todo-lists',\r\n            {title: newTodolistTitle});\r\n    },\r\n    updateTodolist(todolistId: string, newTodolistTitle: string) {\r\n        return instance.put <CommonResponseType<{\r\n            todolistId: string\r\n            newTodolistTitle: string\r\n        }>>(`/todo-lists/${todolistId}`, {title: newTodolistTitle});\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get('/auth/me')\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post('/auth/login', {email, password, rememberMe})\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    logout() {\r\n        return instance.delete('/auth/login')\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    }\r\n};","import {api} from \"../dal/api\";\r\nimport {ITask, ITodolist} from \"../types/types.js\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType, InferActionsTypes} from \"./store\";\r\n\r\ninterface IInitState {\r\n    todolists: Array<ITodolist>\r\n}\r\n\r\nconst initState: IInitState = {\r\n    todolists: []\r\n};\r\n\r\nexport const todolistReducer = (state: IInitState = initState, action: TodolistReducerActionTypes): IInitState => {\r\n    switch (action.type) {\r\n        case \"TodoList/Reducer/ADD_TODOLIST\":\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodoList]\r\n            };\r\n        case \"TodoList/Reducer/SET_TODOLISTS\":\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(t => ({...t, tasks: []}))\r\n            };\r\n        case \"TodoList/Reducer/DELETE_TODOLIST\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(t => {\r\n                    return t.id !== action.todolistId\r\n                })\r\n            };\r\n        case \"TodoList/Reducer/ADD_TASK\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {...t, tasks: [...t.tasks, action.newTask]}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            };\r\n        case \"TodoList/Reducer/SET_TASKS\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {...t, tasks: action.tasks}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            };\r\n        case \"TodoList/Reducer/CHANGE_TASK\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id === action.todolistId) {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.map(task => {\r\n                                if (task.id === action.taskId) {\r\n                                    return {...task, ...action.obj};\r\n                                } else {\r\n                                    return task;\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        case \"TodoList/Reducer/CHANGE_TODOLIST\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id === action.todolistId) {\r\n                        return {...todo}\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        case \"TodoList/Reducer/DELETE_TASK\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id === action.todolistId) {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.filter(task => {\r\n                                return task.id !== action.taskId\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//ActionCreators\r\ntype TodolistReducerActionTypes = InferActionsTypes<typeof actions>;\r\n\r\nconst actions = {\r\n    changeTodolist: (todolistId: string, newTodolistTitle: string) =>\r\n        ({type: 'TodoList/Reducer/CHANGE_TODOLIST', todolistId, newTodolistTitle} as const),\r\n    setTasks: (tasks: Array<ITask>, todolistId: string) =>\r\n        ({type: 'TodoList/Reducer/SET_TASKS', tasks, todolistId} as const),\r\n    setTodolist: (todolists: Array<ITodolist>) =>\r\n        ({type: 'TodoList/Reducer/SET_TODOLISTS', todolists} as const),\r\n    deleteTask: (todolistId: string, taskId: string) =>\r\n        ({type: 'TodoList/Reducer/DELETE_TASK', todolistId, taskId} as const),\r\n    changeTask: (taskId: string, obj: any, todolistId: string) =>\r\n        ({type: 'TodoList/Reducer/CHANGE_TASK', taskId, obj, todolistId} as const),\r\n    addTask: (newTask: ITask, todolistId: string) =>\r\n        ({type: 'TodoList/Reducer/ADD_TASK', newTask, todolistId} as const),\r\n    deleteTodolist: (todolistId: string) =>\r\n        ({type: 'TodoList/Reducer/DELETE_TODOLIST', todolistId} as const),\r\n    addTodolist: (newTodoList: ITodolist) =>\r\n        ({type: 'TodoList/Reducer/ADD_TODOLIST', newTodoList} as const)\r\n};\r\n\r\n//ThunkCreators\r\n\r\ntype ThunkActionType = ThunkAction<void, AppStateType, unknown, TodolistReducerActionTypes>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, TodolistReducerActionTypes>\r\n\r\nexport const loadTasksTC = (todolistId: string): ThunkActionType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        let response = await api.getTasks(todolistId);\r\n        let allTasks = response.data.items;\r\n        dispatch(actions.setTasks(allTasks, todolistId));\r\n    };\r\n};\r\n\r\nexport const addTaskTC = (newText: string, todolistId: string): ThunkActionType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        let response = await api.createTask(newText, todolistId);\r\n        let newTask = response.data.data.item;\r\n        dispatch(actions.addTask(newTask, todolistId));\r\n    }\r\n};\r\n\r\nexport const changeTaskTC = (taskId: string, todolistId: string, task: ITask, obj: any): ThunkActionType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        await api.updateTask(task, obj);\r\n        dispatch(actions.changeTask(taskId, obj, todolistId));\r\n    }\r\n};\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        await api.deleteTask(taskId);\r\n        dispatch(actions.deleteTask(todolistId, taskId));\r\n    };\r\n\r\nexport const setTodoListTC = (): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        let response = await api.getTodolists();\r\n        dispatch(actions.setTodolist(response.data));\r\n    };\r\n\r\nexport const addTodoListTC = (title: string): ThunkActionType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        let response = await api.createTodolists(title);\r\n        let todolists = response.data.data.item;\r\n        dispatch(actions.addTodolist(todolists));\r\n    }\r\n};\r\n\r\nexport const changeTodoListTC = (todolistId: string, newTodolistTitle: string): ThunkActionType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        await api.updateTodolist(todolistId, newTodolistTitle);\r\n        dispatch(actions.changeTodolist(todolistId, newTodolistTitle));\r\n    }\r\n};\r\n\r\nexport const deleteTodolistTC = (todolistId: string): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        await api.deleteTodolist(todolistId);\r\n        dispatch(actions.deleteTodolist(todolistId));\r\n    };","import {authAPI} from \"../dal/api\";\r\nimport {IISAuth} from \"../types/types.js\";\r\nimport {AppStateType} from \"./store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst SET_AUTH_USER_DATA = 'TodoList/Reducer/SET_AUTH_USER_DATA';\r\n\r\ninterface ISetAuthUserData {\r\n    type: typeof SET_AUTH_USER_DATA\r\n    payload: IISAuth\r\n}\r\n\r\nconst setAuthUserData =\r\n    (userId: number | null, email: string | null, login: string | null, isAuth: boolean): ISetAuthUserData => (\r\n        {type: SET_AUTH_USER_DATA, payload: {userId, email, login, isAuth}}\r\n    );\r\n\r\nconst initState: IISAuth = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nexport const authReducer = (state: IISAuth = initState, action: ISetAuthUserData): IISAuth => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//ThunkCreators\r\n\r\ntype ThunkActionType = ThunkAction<void, AppStateType, unknown, ISetAuthUserData>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ISetAuthUserData>\r\n\r\nexport const getAuthUserData = (): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        let response = await authAPI.authMe();\r\n        if (response.resultCode === 0) {\r\n            let {id, email, login} = response.data;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n    };\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        let response = await authAPI.login(email, password, rememberMe);\r\n        if (response.resultCode === 0) {\r\n            dispatch(getAuthUserData());\r\n        }\r\n    };\r\n\r\nexport const logout = (): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        let response = await authAPI.logout();\r\n        if (response.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));\r\n        }\r\n    };","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {todolistReducer} from \"./reducer\";\r\nimport {authReducer} from \"./authReducer\";\r\n\r\nlet rootReducers = combineReducers({\r\n   reducer: todolistReducer,\r\n   auth: authReducer,\r\n   form: formReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducers>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionsTypes< T extends {[key: string]: (...args: any) => any}> = ReturnType<PropertiesType<T>>\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","export const required = (value: any) => {\r\n  if(value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import React from 'react';\r\nimport mod from './FormControl.module.sass';\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={mod.formControl + ' ' + (hasError && mod.error)}>\r\n            <input {...input} {...props} />\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport mod from './Login.module.sass';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\nimport {Input} from \"../FormControl/FormControl\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\ninterface IProps {\r\n    isAuth: boolean\r\n    login: Function\r\n}\r\n\r\ninterface IMapStateToProps {\r\n    isAuth: boolean\r\n}\r\n\r\ninterface IFormData {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst maxLength20 = maxLengthCreator(20);\r\nconst maxLength40 = maxLengthCreator(40);\r\n\r\nlet LoginForm = (props: any) => {\r\n    return <form onSubmit={props.handleSubmit} className={mod.loginForm}>\r\n        <Field component={Input} name={'email'} placeholder={'Email'}\r\n               validate={[required, maxLength40]}/>\r\n        <Field component={Input} name={'password'} type={'password'} placeholder={'Password'}\r\n               validate={[required, maxLength20]}/>\r\n        <div><Field component={Input} type={'checkbox'} name={'rememberMe'}/>remember me</div>\r\n        <button>Login</button>\r\n    </form>\r\n};\r\n\r\nlet Login = (props: IProps) => {\r\n\r\n    let onSubmit = (formData: any) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    };\r\n\r\n    if(props.isAuth){\r\n        return <Redirect to='/'/>\r\n    }\r\n\r\n    return (\r\n        <div className={mod.login}>\r\n            <div className={mod.loginTitle}>Login</div>\r\n            <LoginReducerForm onSubmit={onSubmit}/>\r\n            <div className={mod.testData}>\r\n                Тестовые e-mail и password:\r\n                <div>E-mail: <span>free@samuraijs.com</span></div>\r\n                <div>Password: <span>free</span></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet LoginReducerForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\nconst mapStateToProps = (state: AppStateType): IMapStateToProps => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\n","import React from 'react';\r\nimport mod from './TodoListTask.module.sass';\r\nimport basket from '../../../images/basket.svg';\r\nimport {ITask} from '../../../types/types';\r\n\r\ninterface IProps {\r\n    task: ITask\r\n    changeTitle: (id: string, title: string) => void\r\n    changeIsDoneStatus: (id: string, status: number) => void\r\n    deleteTask: (id: string) => void\r\n}\r\n\r\nclass TodoListTask extends React.Component<IProps> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    };\r\n\r\n    deactiveEditMode = () => {\r\n        this.props.changeTitle(this.props.task.id, this.state.title);\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n    };\r\n\r\n    onIsDoneChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeIsDoneStatus(this.props.task.id, status);\r\n    };\r\n\r\n    onTitleChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    onDeleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let toDoListDoneClass = this.props.task.status ? `${mod.done}` : '';\r\n\r\n        return (\r\n            <div className={mod.todoListTask}>\r\n                <input type=\"checkbox\" id='check' checked={this.props.task.status === 2}\r\n                       onChange={this.onIsDoneChanged}/>\r\n                <div className={mod.todoListTaskItem}>\r\n                    <div>\r\n                        {this.state.editMode\r\n                            ? <input onBlur={this.deactiveEditMode} onChange={this.onTitleChanged}\r\n                                     autoFocus={true} value={this.state.title}/>\r\n                            :\r\n                            <span onClick={this.activateEditMode} className={toDoListDoneClass}>{this.props.task.title}\r\n                                </span>}\r\n                    </div>\r\n                    <button className={mod.todoListTaskDelete} onClick={this.onDeleteTask}><img src={basket}\r\n                                                                                                alt=\"basket\"/></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport {ITask} from \"../../../types/types\";\r\n\r\ninterface IProps {\r\n    tasks: Array<ITask>\r\n    changeTitle: (id: string, title: string) => void\r\n    changeIsDoneStatus: (id: string, status: number) => void\r\n    deleteTask: (id: string) => void\r\n}\r\n\r\nclass TodoListTasks extends React.Component<IProps> {\r\n\r\n    render = () => {\r\n\r\n        let tasksElement = this.props.tasks.map(task =>\r\n            <TodoListTask key={task.id}\r\n                          task={task}\r\n                          changeIsDoneStatus={this.props.changeIsDoneStatus}\r\n                          changeTitle={this.props.changeTitle}\r\n                          deleteTask={this.props.deleteTask} />);\r\n\r\n        return (\r\n            <div>\r\n                {tasksElement}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;","import React from 'react';\r\nimport mod from './TodoListFooter.module.sass'\r\n\r\ninterface IProps {\r\n    changeFilter: (value: string) => void\r\n    filterValue: string\r\n}\r\n\r\nclass TodoListFooter extends React.Component<IProps>{\r\n\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All');\r\n    };\r\n\r\n    onComplitedFilterClick = () => {\r\n        this.props.changeFilter('Completed');\r\n    };\r\n\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active');\r\n    };\r\n\r\n    onHideFilterClick = () => {\r\n        this.setState({\r\n            isHidden: true\r\n        })\r\n    };\r\n\r\n    onShowFilterClick = () => {\r\n        this.setState({\r\n            isHidden: false\r\n        })\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === 'All' ? `${mod.filterActive}` : '';\r\n        let classForCompleted = this.props.filterValue === 'Completed' ? `${mod.filterActive}` : '';\r\n        let classForActive = this.props.filterValue === 'Active' ? `${mod.filterActive}` : '';\r\n\r\n        return (\r\n            <div className={mod.todoListFooter}>\r\n                {!this.state.isHidden &&\r\n                <div>\r\n                    <button onClick= {() => {this.onAllFilterClick()}}\r\n                            className={classForAll}>All</button>\r\n                    <button onClick= {() => {this.onComplitedFilterClick()}}\r\n                            className={classForCompleted}>Completed</button>\r\n                    <button onClick= {() => {this.onActiveFilterClick()}}\r\n                            className={classForActive}>Active</button>\r\n                </div>}\r\n                {!this.state.isHidden && <span onClick={() => {this.onHideFilterClick()}}>hide</span>}\r\n                {this.state.isHidden && <span onClick={() => {this.onShowFilterClick()}}>show</span>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;","import React from 'react';\r\nimport mod from './TodoListInputForm.module.sass';\r\n\r\ninterface IProps {\r\n    addNewTitle: (newTitle: string) => void\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<IProps> {\r\n\r\n    state = {\r\n        error: false,\r\n        title: ''\r\n    };\r\n\r\n    onInputTextChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        })\r\n    };\r\n\r\n    onAddNewItemTitle = () => {\r\n        let newTitle = this.state.title;\r\n        this.setState({title: ''});\r\n        if (newTitle === '') {\r\n            this.setState({\r\n                error: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                error: false\r\n            });\r\n            this.props.addNewTitle(newTitle);\r\n        }\r\n    };\r\n\r\n    onPressEnter = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddNewItemTitle();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        let errorInput = this.state.error ? 'error' : '';\r\n        return (\r\n            <div className={mod.todoListHeader}>\r\n                <div className={mod.todoListNewTaskForm}>\r\n                    <input type=\"text\" placeholder=\"New item name\"\r\n                           className={errorInput}\r\n                           onChange={this.onInputTextChange}\r\n                           onKeyPress={this.onPressEnter}\r\n                           value={this.state.title}/>\r\n                    <button onClick={() => {this.onAddNewItemTitle()}\r\n                    }>Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","import React from 'react';\r\nimport mod from './TodoListTitle.module.sass';\r\n\r\ninterface IProps {\r\n    title: string\r\n    changeTodolist: (title: string) => void\r\n}\r\n\r\ninterface ILocalState {\r\n    title: string\r\n    editMode: boolean\r\n}\r\n\r\nclass TodoListTitle extends React.Component<IProps, ILocalState> {\r\n\r\n    state = {\r\n        title: this.props.title,\r\n        editMode: false\r\n    };\r\n\r\n    activeEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactiveEditMode = () => {\r\n        this.props.changeTodolist(this.state.title);\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    };\r\n\r\n    changeTodolistTitle = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                {this.state.editMode\r\n                ? <input onBlur={this.deactiveEditMode} autoFocus={true} value={this.state.title}\r\n                    onChange={this.changeTodolistTitle} className={mod.todolistTitleInput}/>\r\n                : <h3 className={mod.todolistHeaderTitle} onClick={this.activeEditMode}>{this.state.title}</h3>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;","import React from 'react';\r\nimport TodoListTasks from \"../TodoListTasks/TodoListTasks\";\r\nimport TodoListFooter from \"../TodoListFooter/TodoListFooter\";\r\nimport AddNewItemForm from \"../TodoListHeader/AddNewItemForm\";\r\nimport {connect} from 'react-redux';\r\nimport mod from './TodoList.module.sass';\r\nimport {\r\n    addTaskTC, changeTaskTC, changeTodoListTC,\r\n    deleteTaskTC, deleteTodolistTC, loadTasksTC\r\n} from \"../../../redux/reducer\";\r\nimport basket from \"../../../images/basket.svg\";\r\nimport TodoListTitle from \"../TodoListHeader/TodoListTitle\";\r\nimport {ITask} from \"../../../types/types\";\r\n\r\ninterface IProps {\r\n    loadTasks: (id: string) => void\r\n    addTask: (newText: string, id: string) => void\r\n    changeTask: (taskId: string, id: string, task: ITask, obj: any) => void\r\n    changeTodolist: (id: string, title: string) => void\r\n    deleteTask: (taskId: string, id: string) => void\r\n    deleteTodolist: (id: string) => void\r\n    title: string\r\n    id: string\r\n    tasks: Array<ITask>\r\n}\r\n\r\ninterface ILocalState {\r\n    filterValue: string\r\n    nextTaskId: number\r\n    editMode: boolean\r\n}\r\n\r\nclass TodoList extends React.Component<IProps, ILocalState> {\r\n\r\n    componentDidMount() {\r\n        this.setTasks();\r\n    };\r\n\r\n    state = {\r\n        filterValue: 'All',\r\n        nextTaskId: 3,\r\n        editMode: false\r\n    };\r\n\r\n    setTasks = () => {\r\n        this.props.loadTasks(this.props.id);\r\n    };\r\n\r\n    addTask = (newText: string) => {\r\n        this.props.addTask(newText, this.props.id);\r\n    };\r\n\r\n    changeFilter = (newFilterValue: string) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        })\r\n    };\r\n\r\n    changeTask = (taskId: string, obj: any) => {\r\n        let changedTask = this.props.tasks.find(task => {\r\n            return task.id === taskId;\r\n        });\r\n        let task = {...changedTask, ...obj};\r\n        this.props.changeTask(taskId, this.props.id, task, obj);\r\n    };\r\n\r\n    changeTodolist = (title: string) => {\r\n        this.props.changeTodolist(this.props.id, title);\r\n    };\r\n\r\n    changeIsDoneStatus = (taskId: string, status: number) => {\r\n        this.changeTask(taskId, {status: status})\r\n    };\r\n\r\n    changeTitle = (taskId: string, title: string) => {\r\n        this.changeTask(taskId, {title: title})\r\n    };\r\n\r\n    deleteTask = (taskId: string) => {\r\n        this.props.deleteTask(this.props.id, taskId);\r\n    };\r\n\r\n    deleteTodolist = () => {\r\n        this.props.deleteTodolist(this.props.id);\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n        alert(true);\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        alert(false);\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let {tasks = []} = this.props;\r\n\r\n        return (\r\n            <div className={mod.App}>\r\n                <div className={mod.todoList}>\r\n                    <div className={mod.todoListHeader}>\r\n                        <TodoListTitle title={this.props.title} changeTodolist={this.changeTodolist}/>\r\n                        <button onClick={() => {\r\n                            this.deleteTodolist()\r\n                        }} className={mod.todoListDeleteButton}><img src={basket} alt=\"basket\"/>\r\n                        </button>\r\n                    </div>\r\n                    <div className={mod.todoListInput}>\r\n                        <AddNewItemForm addNewTitle={this.addTask}/>\r\n                    </div>\r\n                    <div className={mod.todoListContent}>\r\n                        <TodoListTasks changeIsDoneStatus={this.changeIsDoneStatus}\r\n                                       changeTitle={this.changeTitle}\r\n                            /*changeTask={this.changeTask}*/\r\n                                       deleteTask={this.deleteTask}\r\n                                       tasks={tasks.filter(t => {\r\n                                           if (this.state.filterValue === 'All') {\r\n                                               return 2;\r\n                                           } else if (this.state.filterValue === 'Active') {\r\n                                               return t.status === 0;\r\n                                           } else {\r\n                                               return t.status === 2;\r\n                                           }\r\n                                       })}/>\r\n                    </div>\r\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => {\r\n    return {\r\n        addTask: (newText: string, todolistId: string) => {\r\n            dispatch(addTaskTC(newText, todolistId));\r\n        },\r\n        loadTasks: (todolistId: string) => {\r\n            dispatch(loadTasksTC(todolistId));\r\n        },\r\n        changeTask: (taskId: string, todolistId: string, task: ITask, obj: any) => {\r\n            dispatch(changeTaskTC(taskId, todolistId, task, obj));\r\n        },\r\n        deleteTask(todolistId: string, taskId: string) {\r\n            dispatch(deleteTaskTC(todolistId, taskId));\r\n        },\r\n        deleteTodolist: (todolistId: string) => {\r\n            dispatch(deleteTodolistTC(todolistId));\r\n        },\r\n        changeTodolist(todolistId: string, newTodolistTitle: string) {\r\n            dispatch(changeTodoListTC(todolistId, newTodolistTitle));\r\n        }\r\n    }\r\n};\r\n\r\nconst TodoListConnected = connect(null, mapDispatchToProps)(TodoList);\r\n\r\nexport default TodoListConnected;\r\n\r\n","import React from 'react';\r\nimport mod from './Item.module.sass';\r\nimport TodoList from \"./TodoList/TodoList\";\r\nimport AddNewItemForm from \"./TodoListHeader/AddNewItemForm\";\r\nimport {ITodolist} from \"../../types/types\";\r\n\r\ninterface IProps {\r\n    addTodolist: (title: string) => void\r\n    todolists: Array<ITodolist>\r\n    isAuth :boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nclass Item extends React.Component<IProps> {\r\n\r\n    state = {\r\n        newTodoListId: 0\r\n    };\r\n\r\n    addNewTodolist = (title: string) => {\r\n        this.props.addTodolist(title);\r\n    };\r\n\r\n    render() {\r\n\r\n        let todolists = this.props.todolists.map(t => {\r\n            return <TodoList key={t.id} id={t.id} title={t.title} tasks={t.tasks}/>\r\n        });\r\n\r\n        return (\r\n            <div className={mod.item}>\r\n                <div className={mod.itemHeader}>\r\n                    <AddNewItemForm addNewTitle={this.addNewTodolist}/>\r\n                    {this.props.isAuth\r\n                        ? <div>{this.props.login}\r\n                            <div onClick={this.props.logout} className={mod.logout}>logout</div>\r\n                        </div>\r\n                        : <div>Login</div>}\r\n                </div>\r\n                <div className={mod.App}>\r\n                    {todolists}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;\r\n\r\n","import React from 'react';\r\nimport {addTodoListTC, setTodoListTC} from \"../../redux/reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Item from \"./Item\";\r\nimport {getAuthUserData, logout} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ITodolist} from \"../../types/types.js\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\ninterface IMapStateProps {\r\n    todolists: Array<ITodolist>\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ninterface IMapDispatchProps {\r\n    setTodolists: () => void\r\n    setAuthUserData: () => void\r\n    addTodolist: (newTodoListTitle: string) => void\r\n    logout: () => void\r\n}\r\n\r\nclass ItemContainer extends React.Component<IMapStateProps & IMapDispatchProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.setTodolists();\r\n        this.props.setAuthUserData();\r\n    };\r\n\r\n    render() {\r\n\r\n        if(!this.props.isAuth){\r\n            return <Redirect to='/login'/>\r\n        }\r\n\r\n        return (\r\n            <Item {...this.props} />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): IMapStateProps => {\r\n    return {\r\n        todolists: state.reducer.todolists,\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Function): IMapDispatchProps => {\r\n    return {\r\n        addTodolist: (newTodoListTitle: string) => {\r\n            const thunk = addTodoListTC(newTodoListTitle);\r\n            dispatch(thunk);\r\n        },\r\n        setTodolists: (/*todolists: Array<ITodolist>*/) => {\r\n            const thunk = setTodoListTC(/*todolists*/);\r\n            dispatch(thunk);\r\n        },\r\n        setAuthUserData: (/*id: number, login: string, email: string*/) => {\r\n            const thunk = getAuthUserData(/*id, login, email*/);\r\n            dispatch(thunk);\r\n        },\r\n        logout: () => {\r\n            const thunk = logout();\r\n            dispatch(thunk);\r\n        }\r\n    }\r\n};\r\n\r\nconst ConnectedItemContainer = connect(mapStateToProps, mapDispatchToProps)(ItemContainer);\r\n\r\nexport default ConnectedItemContainer;\r\n\r\n","import React from 'react';\r\nimport mod from './App.module.css';\r\nimport Login from \"./components/Login/Login\";\r\nimport {Route} from \"react-router-dom\";\r\nimport ConnectedItemContainer from \"./components/Item/ItemContainer\";\r\n\r\nclass App extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={mod.appWrapper}>\r\n                <Route path='/login' render={() => <Login />}/>\r\n                <Route path='/' render={() => <ConnectedItemContainer />}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"TodoList_App__3_rKY\",\"todoList\":\"TodoList_todoList__1UTZc\",\"todoListHeader\":\"TodoList_todoListHeader__1QGGy\",\"todoListDeleteButton\":\"TodoList_todoListDeleteButton__2iuhM\",\"todoListInput\":\"TodoList_todoListInput__kiI__\",\"todoListContent\":\"TodoList_todoListContent__nFY8q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2kBOx\",\"loginForm\":\"Login_loginForm__3aotu\",\"testData\":\"Login_testData__2SXRX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Item_App__2Gf5C\",\"error\":\"Item_error__1ouRN\",\"itemHeader\":\"Item_itemHeader__2ZSBA\",\"logout\":\"Item_logout__39dzF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListTask\":\"TodoListTask_todoListTask__2-DJt\",\"toDoListCheck\":\"TodoListTask_toDoListCheck__8voP-\",\"done\":\"TodoListTask_done__3c2u5\",\"todoListTaskDelete\":\"TodoListTask_todoListTaskDelete__3FJTR\",\"todoListTaskItem\":\"TodoListTask_todoListTaskItem__JGui_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterActive\":\"TodoListFooter_filterActive__2w7EV\",\"todoListFooter\":\"TodoListFooter_todoListFooter__1S4nM\"};","module.exports = __webpack_public_path__ + \"static/media/basket.491ecf80.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__10iKl\",\"error\":\"FormControl_error__1HnSz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListNewTaskForm\":\"TodoListInputForm_todoListNewTaskForm__3OAjG\"};"],"sourceRoot":""}