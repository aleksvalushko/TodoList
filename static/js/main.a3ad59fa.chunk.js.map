{"version":3,"sources":["App.module.css","serviceWorker.js","dal/api.ts","redux/reducer.ts","redux/authReducer.ts","redux/store.ts","utils/validators.ts","components/FormControl/FormControl.tsx","components/Login/Login.tsx","components/Item/TodoListTasks/TodoListTask.tsx","components/Item/TodoListTasks/TodoListTasks.tsx","components/Item/TodoListFooter/TodoListFooter.tsx","components/Item/TodoListHeader/AddNewItemForm.tsx","components/Item/TodoListHeader/TodoListTitle.tsx","components/Item/TodoList/TodoList.tsx","components/Item/Item.tsx","components/Item/ItemContainer.tsx","App.js","index.js","components/Item/TodoList/TodoList.module.sass","components/Login/Login.module.sass","components/Item/Item.module.sass","components/Item/TodoListTasks/TodoListTask.module.sass","components/Item/TodoListFooter/TodoListFooter.module.sass","images/basket.svg","components/FormControl/FormControl.module.sass","components/Item/TodoListHeader/TodoListInputForm.module.sass"],"names":["module","exports","Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","api","newTaskTitle","todolistId","post","title","taskId","get","task","obj","put","delete","newTodolistTitle","authAPI","then","response","data","email","password","rememberMe","promise","ADD_TODOLIST","DELETE_TODOLIST","deleteTodolist","type","ADD_TASK","addTask","newTask","CHANGE_TASK","changeTask","DELETE_TASK","deleteTask","SET_TODOLISTS","SET_TASKS","setTasks","tasks","CHANGE_TODOLIST","changeTodolist","initState","todolists","setAuthUserData","userId","login","isAuth","payload","getAuthUserData","dispatch","a","resultCode","id","rootReducers","combineReducers","reducer","state","action","newTodoList","map","t","filter","todo","auth","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","required","value","maxLengthCreator","maxLength","length","Input","input","meta","props","hasError","touched","error","className","mod","formControl","maxLength20","maxLength40","LoginReducerForm","reduxForm","onSubmit","handleSubmit","loginForm","Field","component","name","placeholder","validate","connect","to","loginTitle","formData","testData","TodoListTask","editMode","activateEditMode","setState","deactiveEditMode","changeTitle","onIsDoneChanged","e","status","currentTarget","checked","changeIsDoneStatus","onTitleChanged","onDeleteTask","render","toDoListDoneClass","done","todoListTask","onChange","todoListTaskItem","onBlur","autoFocus","onClick","todoListTaskDelete","src","basket","alt","React","Component","TodoListTasks","tasksElement","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onComplitedFilterClick","onActiveFilterClick","onHideFilterClick","onShowFilterClick","classForAll","filterValue","filterActive","classForCompleted","classForActive","todoListFooter","AddNewItemForm","onInputTextChange","onAddNewItemTitle","newTitle","addNewTitle","onPressEnter","errorInput","todoListHeader","todoListNewTaskForm","onKeyPress","TodoListTitle","activeEditMode","changeTodolistTitle","todolistTitleInput","todolistHeaderTitle","TodoList","nextTaskId","restoreState","loadTasks","newText","newFilterValue","changedTask","find","App","todoList","todoListDeleteButton","todoListContent","this","TodoListConnected","item","addTaskTC","allTasks","items","loadTasksTC","changeTaskTC","deleteTaskTC","deleteTodolistTC","changeTodoListTC","Item","newTodoListId","addNewTodolist","addTodolist","itemHeader","logout","ItemContainer","setTodolists","ConnectedItemContainer","newTodoListTitle","thunk","appWrapper","path","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3ad59fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1y6-z\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport {ITask} from \"../types/types.js\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '2a70584b-20f7-4ff5-8c15-684fb9f4be7b'}\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle: string, todolistId: string) {\r\n        let promise = instance.post(`/todo-lists/${todolistId}/tasks`,\r\n            {title: newTaskTitle});\r\n        return promise;\r\n    },\r\n    getTasks(taskId: string) {\r\n        let promise = instance.get(`/todo-lists/${taskId}/tasks`);\r\n        return promise;\r\n    },\r\n    updateTask(task: ITask, obj: any) {\r\n        let promise = instance.put('/todo-lists/tasks',{...task, ...obj});\r\n        return promise;\r\n    },\r\n    deleteTask(taskId: string) {\r\n        let promise = instance.delete(`/todo-lists/tasks/${taskId}`);\r\n        return promise;\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        let promise = instance.delete(`/todo-lists/${todolistId}`);\r\n        return promise;\r\n    },\r\n    getTodolists() {\r\n        let promise = instance.get('/todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolists(newTodolistTitle: string) {\r\n        let promise = instance.post('/todo-lists',{title: newTodolistTitle});\r\n        return promise;\r\n    },\r\n    updateTodolist(todolistId: string, newTodolistTitle: string) {\r\n        let promise = instance.put(`/todo-lists/${todolistId}`, {title: newTodolistTitle});\r\n        return promise;\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    authMe(){\r\n        let promise = instance.get('/auth/me')\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n        return promise;\r\n    },\r\n   login(email: string, password: string, rememberMe = false){\r\n        let promise = instance.post('/auth/login', {email, password, rememberMe})\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n        return promise;\r\n    },\r\n    logout(){\r\n        let promise = instance.delete('/auth/login')\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n        return promise;\r\n    }\r\n};","import {api} from \"../dal/api\";\r\nimport {ITask, ITodolist} from \"../types/types.js\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst ADD_TODOLIST = 'TodoList/Reducer/ADD_TODOLIST';\r\n\r\ninterface IAddTodolist {\r\n    type: typeof ADD_TODOLIST\r\n    newTodoList: ITodolist\r\n}\r\n\r\nconst addTodolist = (newTodoList: ITodolist): IAddTodolist => ({type: ADD_TODOLIST, newTodoList});\r\n\r\nconst DELETE_TODOLIST = 'TodoList/Reducer/DELETE_TODOLIST';\r\n\r\ninterface IDeleteTodolist {\r\n    type: typeof DELETE_TODOLIST\r\n    todolistId: string\r\n}\r\n\r\nconst deleteTodolist = (todolistId: string): IDeleteTodolist => ({type: DELETE_TODOLIST, todolistId});\r\n\r\nconst ADD_TASK = 'TodoList/Reducer/ADD_TASK';\r\n\r\ninterface IAddTask {\r\n    type: typeof ADD_TASK\r\n    newTask: ITask\r\n    todolistId: string\r\n}\r\n\r\nconst addTask = (newTask: ITask, todolistId: string): IAddTask => ({type: ADD_TASK, newTask, todolistId});\r\n\r\nconst CHANGE_TASK = 'TodoList/Reducer/CHANGE_TASK';\r\n\r\ninterface IChangeTask {\r\n    type: typeof CHANGE_TASK\r\n    taskId: string\r\n    obj: any\r\n    todolistId: string\r\n}\r\n\r\nconst changeTask = (taskId: string, obj: any, todolistId: string): IChangeTask => ({\r\n    type: CHANGE_TASK,\r\n    taskId,\r\n    obj,\r\n    todolistId\r\n});\r\n\r\nconst DELETE_TASK = 'TodoList/Reducer/DELETE_TASK';\r\n\r\ninterface IDeleteTask {\r\n    type: typeof DELETE_TASK\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nconst deleteTask = (todolistId: string, taskId: string): IDeleteTask => ({type: DELETE_TASK, todolistId, taskId});\r\n\r\nconst SET_TODOLISTS = 'TodoList/Reducer/SET_TODOLISTS';\r\n\r\ninterface ISetTodolists {\r\n    type: typeof SET_TODOLISTS\r\n    todolists: Array<ITodolist>\r\n}\r\n\r\nconst setTodolist = (todolists: Array<ITodolist>): ISetTodolists => ({type: SET_TODOLISTS, todolists});\r\n\r\nconst SET_TASKS = 'TodoList/Reducer/SET_TASKS';\r\n\r\ninterface ISetTasks {\r\n    type: typeof SET_TASKS\r\n    tasks: Array<ITask>\r\n    todolistId: string\r\n}\r\n\r\nconst setTasks = (tasks: Array<ITask>, todolistId: string): ISetTasks => ({type: SET_TASKS, tasks, todolistId});\r\n\r\nconst CHANGE_TODOLIST = 'TodoList/Reducer/CHANGE_TODOLIST';\r\n\r\ninterface IChangeTodolist {\r\n    type: typeof CHANGE_TODOLIST\r\n    todolistId: string\r\n    newTodolistTitle: string\r\n}\r\n\r\nconst changeTodolist = (todolistId: string, newTodolistTitle: string): IChangeTodolist =>\r\n    ({type: CHANGE_TODOLIST, todolistId, newTodolistTitle});\r\n\r\ntype TodolistReducerActionTypes = IAddTodolist | IDeleteTodolist | IAddTask | IChangeTask\r\n    | IDeleteTask | ISetTodolists | ISetTasks | IChangeTodolist;\r\n\r\ninterface IInitState {\r\n    todolists: Array<ITodolist>\r\n}\r\n\r\nconst initState: IInitState = {\r\n    todolists: []\r\n};\r\n\r\nexport const todolistReducer = (state: IInitState = initState, action: TodolistReducerActionTypes): IInitState => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodoList]\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(t => ({...t, tasks: []}))\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(t => {\r\n                    return t.id !== action.todolistId\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {...t, tasks: [...t.tasks, action.newTask]}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            };\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(t => {\r\n                    if (t.id === action.todolistId) {\r\n                        return {...t, tasks: action.tasks}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id === action.todolistId) {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.map(task => {\r\n                                if (task.id === action.taskId) {\r\n                                    return {...task, ...action.obj};\r\n                                } else {\r\n                                    return task;\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id === action.todolistId) {\r\n                        return {...todo}\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id === action.todolistId) {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.filter(task => {\r\n                                return task.id !== action.taskId\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//ThunkCreators\r\n\r\ntype ThunkActionType = ThunkAction<void, AppStateType, unknown, TodolistReducerActionTypes>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, TodolistReducerActionTypes>\r\n\r\nexport const loadTasksTC = (todolistId: string): ThunkActionType => {\r\n    /*return (dispatch: ThunkDispatchType) => {\r\n        api.getTasks(todolistId)\r\n            .then(res => {\r\n                let allTasks = res.data.items;\r\n                dispatch(setTasks(allTasks, todolistId));\r\n            });\r\n    };*/\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        let response = await api.getTasks(todolistId);\r\n        let allTasks = response.data.items;\r\n        dispatch(setTasks(allTasks, todolistId));\r\n    };\r\n};\r\n\r\nexport const addTaskTC = (newText: string, todolistId: string): ThunkActionType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        let response = await api.createTask(newText, todolistId);\r\n        let newTask = response.data.data.item;\r\n        dispatch(addTask(newTask, todolistId));\r\n    }\r\n};\r\n\r\nexport const changeTaskTC = (taskId: string, todolistId: string, task: ITask, obj: any): ThunkActionType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        await api.updateTask(task, obj);\r\n        dispatch(changeTask(taskId, obj, todolistId));\r\n    }\r\n};\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        await api.deleteTask(taskId);\r\n        dispatch(deleteTask(todolistId, taskId));\r\n    };\r\n\r\nexport const setTodoListTC = (): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        let response = await api.getTodolists();\r\n        dispatch(setTodolist(response.data));\r\n    };\r\n\r\nexport const addTodoListTC = (title: string): ThunkActionType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        let response = await api.createTodolists(title);\r\n        let todolists = response.data.data.item;\r\n        dispatch(addTodolist(todolists));\r\n    }\r\n};\r\n\r\nexport const changeTodoListTC = (todolistId: string, newTodolistTitle: string): ThunkActionType => {\r\n    return async (dispatch: ThunkDispatchType) => {\r\n        await api.updateTodolist(todolistId, newTodolistTitle);\r\n        dispatch(changeTodolist(todolistId, newTodolistTitle));\r\n    }\r\n};\r\n\r\nexport const deleteTodolistTC = (todolistId: string): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        await api.deleteTodolist(todolistId);\r\n        dispatch(deleteTodolist(todolistId));\r\n    };","import {authAPI} from \"../dal/api\";\r\nimport {IISAuth} from \"../types/types.js\";\r\nimport {AppStateType} from \"./store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst SET_AUTH_USER_DATA = 'TodoList/Reducer/SET_AUTH_USER_DATA';\r\n\r\ninterface ISetAuthUserData {\r\n    type: typeof SET_AUTH_USER_DATA\r\n    payload: IISAuth\r\n}\r\n\r\nconst setAuthUserData =\r\n    (userId: number | null, email: string | null, login: string | null, isAuth: boolean): ISetAuthUserData => (\r\n        {type: SET_AUTH_USER_DATA, payload: {userId, email, login, isAuth}}\r\n    );\r\n\r\nconst initState: IISAuth = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nexport const authReducer = (state: IISAuth = initState, action: ISetAuthUserData): IISAuth => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//ThunkCreators\r\n\r\ntype ThunkActionType = ThunkAction<void, AppStateType, unknown, ISetAuthUserData>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ISetAuthUserData>\r\n\r\nexport const getAuthUserData = (): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        let response = await authAPI.authMe();\r\n        if (response.resultCode === 0) {\r\n            let {id, email, login} = response.data;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n    };\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        let response = await authAPI.login(email, password, rememberMe);\r\n        if (response.resultCode === 0) {\r\n            dispatch(getAuthUserData());\r\n        }\r\n    };\r\n\r\nexport const logout = (): ThunkActionType =>\r\n    async (dispatch: ThunkDispatchType) => {\r\n        let response = await authAPI.logout();\r\n        if (response.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));\r\n        }\r\n    };","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {todolistReducer} from \"./reducer\";\r\nimport {authReducer} from \"./authReducer\";\r\n\r\nlet rootReducers = combineReducers({\r\n   reducer: todolistReducer,\r\n   auth: authReducer,\r\n   form: formReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducers>\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","export const required = (value: any) => {\r\n  if(value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","import React from 'react';\r\nimport mod from './FormControl.module.sass';\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={mod.formControl + ' ' + (hasError && mod.error)}>\r\n            <input {...input} {...props} />\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport mod from './Login.module.sass';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\nimport {Input} from \"../FormControl/FormControl\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\ninterface IProps {\r\n    isAuth: boolean\r\n    login: Function\r\n}\r\n\r\ninterface IMapStateToProps {\r\n    isAuth: boolean\r\n}\r\n\r\ninterface IFormData {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst maxLength20 = maxLengthCreator(20);\r\nconst maxLength40 = maxLengthCreator(40);\r\n\r\nlet LoginForm = (props: any) => {\r\n    return <form onSubmit={props.handleSubmit} className={mod.loginForm}>\r\n        <Field component={Input} name={'email'} placeholder={'Email'}\r\n               validate={[required, maxLength40]}/>\r\n        <Field component={Input} name={'password'} type={'password'} placeholder={'Password'}\r\n               validate={[required, maxLength20]}/>\r\n        <div><Field component={Input} type={'checkbox'} name={'rememberMe'}/>remember me</div>\r\n        <button>Login</button>\r\n    </form>\r\n};\r\n\r\nlet Login = (props: IProps) => {\r\n\r\n    let onSubmit = (formData: any) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    };\r\n\r\n    if(props.isAuth){\r\n        return <Redirect to='/'/>\r\n    }\r\n\r\n    return (\r\n        <div className={mod.login}>\r\n            <div className={mod.loginTitle}>Login</div>\r\n            <LoginReducerForm onSubmit={onSubmit}/>\r\n            <div className={mod.testData}>\r\n                Тестовые e-mail и password:\r\n                <div>E-mail: <span>free@samuraijs.com</span></div>\r\n                <div>Password: <span>free</span></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet LoginReducerForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\nconst mapStateToProps = (state: AppStateType): IMapStateToProps => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\n","import React from 'react';\r\nimport mod from './TodoListTask.module.sass';\r\nimport basket from '../../../images/basket.svg';\r\nimport {ITask} from \"../../../types/types.js\";\r\n\r\ninterface IProps {\r\n    task: ITask\r\n    changeTitle: (id: string, title: string) => void\r\n    changeIsDoneStatus: (id: string, status: number) => void\r\n    deleteTask: (id: string) => void\r\n}\r\n\r\nclass TodoListTask extends React.Component<IProps> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    };\r\n\r\n    deactiveEditMode = () => {\r\n        this.props.changeTitle(this.props.task.id, this.state.title);\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n    };\r\n\r\n    onIsDoneChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeIsDoneStatus(this.props.task.id, status);\r\n    };\r\n\r\n    onTitleChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    };\r\n\r\n    onDeleteTask = () => {\r\n        this.props.deleteTask(this.props.task.id)\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let toDoListDoneClass = this.props.task.status ? `${mod.done}` : '';\r\n\r\n        return (\r\n            <div className={mod.todoListTask}>\r\n                <input type=\"checkbox\" id='check' checked={this.props.task.status === 2}\r\n                       onChange={this.onIsDoneChanged}/>\r\n                <div className={mod.todoListTaskItem}>\r\n                    <div>\r\n                        {this.state.editMode\r\n                            ? <input onBlur={this.deactiveEditMode} onChange={this.onTitleChanged}\r\n                                     autoFocus={true} value={this.state.title}/>\r\n                            :\r\n                            <span onClick={this.activateEditMode} className={toDoListDoneClass}>{this.props.task.title}\r\n                                </span>}\r\n                    </div>\r\n                    <button className={mod.todoListTaskDelete} onClick={this.onDeleteTask}><img src={basket}\r\n                                                                                                alt=\"basket\"/></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTask;","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport {ITask} from \"../../../types/types.js\";\r\n\r\ninterface IProps {\r\n    tasks: Array<ITask>\r\n    changeTitle: (id: string, title: string) => void\r\n    changeIsDoneStatus: (id: string, status: number) => void\r\n    deleteTask: (id: string) => void\r\n}\r\n\r\nclass TodoListTasks extends React.Component<IProps> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props)\r\n    }\r\n\r\n    render = () => {\r\n\r\n        let tasksElement = this.props.tasks.map(task =>\r\n            <TodoListTask key={task.id}\r\n                          task={task}\r\n                          changeIsDoneStatus={this.props.changeIsDoneStatus}\r\n                          changeTitle={this.props.changeTitle}\r\n                          deleteTask={this.props.deleteTask} />);\r\n\r\n        return (\r\n            <div>\r\n                {tasksElement}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;","import React from 'react';\r\nimport mod from './TodoListFooter.module.sass'\r\n\r\ninterface IProps {\r\n    changeFilter: (value: string) => void\r\n    filterValue: string\r\n}\r\n\r\nclass TodoListFooter extends React.Component<IProps>{\r\n\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = () => {\r\n        this.props.changeFilter('All');\r\n    };\r\n\r\n    onComplitedFilterClick = () => {\r\n        this.props.changeFilter('Completed');\r\n    };\r\n\r\n    onActiveFilterClick = () => {\r\n        this.props.changeFilter('Active');\r\n    };\r\n\r\n    onHideFilterClick = () => {\r\n        this.setState({\r\n            isHidden: true\r\n        })\r\n    };\r\n\r\n    onShowFilterClick = () => {\r\n        this.setState({\r\n            isHidden: false\r\n        })\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === 'All' ? `${mod.filterActive}` : '';\r\n        let classForCompleted = this.props.filterValue === 'Completed' ? `${mod.filterActive}` : '';\r\n        let classForActive = this.props.filterValue === 'Active' ? `${mod.filterActive}` : '';\r\n\r\n        return (\r\n            <div className={mod.todoListFooter}>\r\n                {!this.state.isHidden &&\r\n                <div>\r\n                    <button onClick= {() => {this.onAllFilterClick()}}\r\n                            className={classForAll}>All</button>\r\n                    <button onClick= {() => {this.onComplitedFilterClick()}}\r\n                            className={classForCompleted}>Completed</button>\r\n                    <button onClick= {() => {this.onActiveFilterClick()}}\r\n                            className={classForActive}>Active</button>\r\n                </div>}\r\n                {!this.state.isHidden && <span onClick={() => {this.onHideFilterClick()}}>hide</span>}\r\n                {this.state.isHidden && <span onClick={() => {this.onShowFilterClick()}}>show</span>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;","import React from 'react';\r\nimport mod from './TodoListInputForm.module.sass';\r\n\r\ninterface IProps {\r\n    addNewTitle: (newTitle: string) => void\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<IProps> {\r\n\r\n    state = {\r\n        error: false,\r\n        title: ''\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    onInputTextChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        })\r\n    };\r\n\r\n    onAddNewItemTitle = () => {\r\n        let newTitle = this.state.title;\r\n        this.setState({title: ''});\r\n        if (newTitle === '') {\r\n            this.setState({\r\n                error: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                error: false\r\n            });\r\n            this.props.addNewTitle(newTitle);\r\n        }\r\n    };\r\n\r\n    onPressEnter = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            this.onAddNewItemTitle();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        let errorInput = this.state.error ? 'error' : '';\r\n        return (\r\n            <div className={mod.todoListHeader}>\r\n                <div className={mod.todoListNewTaskForm}>\r\n                    <input type=\"text\" placeholder=\"New item name\"\r\n                           className={errorInput}\r\n                           onChange={this.onInputTextChange}\r\n                           onKeyPress={this.onPressEnter}\r\n                           value={this.state.title}/>\r\n                    <button onClick={() => {this.onAddNewItemTitle()}\r\n                    }>Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;","import React from 'react';\r\nimport mod from './TodoListTitle.module.sass';\r\n\r\ninterface IProps {\r\n    title: string\r\n    changeTodolist: (title: string) => void\r\n}\r\n\r\ninterface ILocalState {\r\n    title: string\r\n    editMode: boolean\r\n}\r\n\r\nclass TodoListTitle extends React.Component<IProps, ILocalState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        title: this.props.title,\r\n        editMode: false\r\n    };\r\n\r\n    activeEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactiveEditMode = () => {\r\n        this.props.changeTodolist(this.state.title);\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    };\r\n\r\n    changeTodolistTitle = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                {this.state.editMode\r\n                ? <input onBlur={this.deactiveEditMode} autoFocus={true} value={this.state.title}\r\n                    onChange={this.changeTodolistTitle} className={mod.todolistTitleInput}/>\r\n                : <h3 className={mod.todolistHeaderTitle} onClick={this.activeEditMode}>{this.state.title}</h3>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;","import React from 'react';\r\nimport TodoListTasks from \"../TodoListTasks/TodoListTasks\";\r\nimport TodoListFooter from \"../TodoListFooter/TodoListFooter\";\r\nimport AddNewItemForm from \"../TodoListHeader/AddNewItemForm\";\r\nimport {connect} from 'react-redux';\r\nimport mod from './TodoList.module.sass';\r\nimport {\r\n    addTaskTC, changeTaskTC, changeTodoListTC,\r\n    deleteTaskTC, deleteTodolistTC, loadTasksTC\r\n} from \"../../../redux/reducer\";\r\nimport basket from \"../../../images/basket.svg\";\r\nimport TodoListTitle from \"../TodoListHeader/TodoListTitle\";\r\nimport {ITask} from \"../../../types/types.js\";\r\n\r\ninterface IProps {\r\n    loadTasks: (id: string) => void\r\n    addTask: (newText: string, id: string) => void\r\n    changeTask: (taskId: string, id: string, task: ITask, obj: any) => void\r\n    changeTodolist: (id: string, title: string) => void\r\n    deleteTask: (taskId: string, id: string) => void\r\n    deleteTodolist: (id: string) => void\r\n    title: string\r\n    id: string\r\n    tasks: Array<ITask>\r\n}\r\n\r\ninterface ILocalState {\r\n    filterValue: string\r\n    nextTaskId: number\r\n}\r\n\r\nclass TodoList extends React.Component<IProps, ILocalState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    };\r\n\r\n    state = {\r\n        filterValue: 'All',\r\n        nextTaskId: 3\r\n    };\r\n\r\n    restoreState = () => {\r\n        this.props.loadTasks(this.props.id);\r\n    };\r\n\r\n    addTask = (newText: string) => {\r\n        this.props.addTask(newText, this.props.id);\r\n    };\r\n\r\n    changeFilter = (newFilterValue: string) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        })\r\n    };\r\n\r\n    changeTask = (taskId: string, obj: any) => {\r\n        let changedTask = this.props.tasks.find(task => {\r\n            return task.id === taskId;\r\n        });\r\n        let task = {...changedTask, ...obj};\r\n        this.props.changeTask(taskId, this.props.id, task, obj);\r\n    };\r\n\r\n    changeTodolist = (title: string) => {\r\n        this.props.changeTodolist(this.props.id, title);\r\n    };\r\n\r\n    changeIsDoneStatus = (taskId: string, status: number) => {\r\n        this.changeTask(taskId, {status: status})\r\n    };\r\n\r\n    changeTitle = (taskId: string, title: string) => {\r\n        this.changeTask(taskId, {title: title})\r\n    };\r\n\r\n    deleteTask = (taskId: string) => {\r\n        this.props.deleteTask(this.props.id, taskId);\r\n    };\r\n\r\n    deleteTodolist = () => {\r\n        this.props.deleteTodolist(this.props.id);\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let {tasks = []} = this.props;\r\n\r\n        return (\r\n            <div className={mod.App}>\r\n                <div className={mod.todoList}>\r\n                    <div className={mod.todoListHeader}>\r\n                        <TodoListTitle title={this.props.title} changeTodolist={this.changeTodolist}/>\r\n                        <button onClick={() => {\r\n                            this.deleteTodolist()\r\n                        }} className={mod.todoListDeleteButton}><img src={basket} alt=\"basket\"/>\r\n                        </button>\r\n                    </div>\r\n                    <AddNewItemForm addNewTitle={this.addTask}/>\r\n                    <div className={mod.todoListContent}>\r\n                        <TodoListTasks changeIsDoneStatus={this.changeIsDoneStatus}\r\n                                       changeTitle={this.changeTitle}\r\n                                       /*changeTask={this.changeTask}*/\r\n                                       deleteTask={this.deleteTask}\r\n                                       tasks={tasks.filter(t => {\r\n                                           if (this.state.filterValue === 'All') {\r\n                                               return 2;\r\n                                           } else if (this.state.filterValue === 'Active') {\r\n                                               return t.status === 0;\r\n                                           } else {\r\n                                               return t.status === 2;\r\n                                           }\r\n                                       })}/>\r\n                    </div>\r\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => {\r\n    return {\r\n        addTask: (newText: string, todolistId: string) => {\r\n            dispatch(addTaskTC(newText, todolistId));\r\n        },\r\n        loadTasks: (todolistId: string) => {\r\n            dispatch(loadTasksTC(todolistId));\r\n        },\r\n        changeTask: (taskId: string, todolistId: string, task: ITask, obj: any) => {\r\n            dispatch(changeTaskTC(taskId, todolistId, task, obj));\r\n        },\r\n        deleteTask(todolistId: string, taskId: string) {\r\n            dispatch(deleteTaskTC(todolistId, taskId));\r\n        },\r\n        deleteTodolist: (todolistId: string) => {\r\n            dispatch(deleteTodolistTC(todolistId));\r\n        },\r\n        changeTodolist(todolistId: string, newTodolistTitle: string) {\r\n            dispatch(changeTodoListTC(todolistId, newTodolistTitle));\r\n        }\r\n    }\r\n};\r\n\r\nconst TodoListConnected = connect(null, mapDispatchToProps)(TodoList);\r\n\r\nexport default TodoListConnected;\r\n\r\n","import React from 'react';\r\nimport mod from './Item.module.sass';\r\nimport TodoList from \"./TodoList/TodoList\";\r\nimport AddNewItemForm from \"./TodoListHeader/AddNewItemForm\";\r\nimport {ITodolist} from \"../../types/types.js\";\r\n\r\ninterface IProps {\r\n    addTodolist: (title: string) => void\r\n    todolists: Array<ITodolist>\r\n    isAuth :boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nclass Item extends React.Component<IProps> {\r\n\r\n    state = {\r\n        newTodoListId: 0\r\n    };\r\n\r\n    addNewTodolist = (title: string) => {\r\n        this.props.addTodolist(title);\r\n    };\r\n\r\n    render() {\r\n\r\n        let todolists = this.props.todolists.map(t => {\r\n            return <TodoList key={t.id} id={t.id} title={t.title} tasks={t.tasks}/>\r\n        });\r\n\r\n        return (\r\n            <div className={mod.item}>\r\n                <div className={mod.itemHeader}>\r\n                    <AddNewItemForm addNewTitle={this.addNewTodolist}/>\r\n                    {this.props.isAuth\r\n                        ? <div>{this.props.login}\r\n                            <div onClick={this.props.logout} className={mod.logout}>logout</div>\r\n                        </div>\r\n                        : <div>Login</div>}\r\n                </div>\r\n                <div className={mod.App}>\r\n                    {todolists}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;\r\n\r\n","import React from 'react';\r\nimport {addTodoListTC, setTodoListTC} from \"../../redux/reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Item from \"./Item\";\r\nimport {getAuthUserData, logout} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ITodolist} from \"../../types/types.js\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\ninterface IMapStateProps {\r\n    todolists: Array<ITodolist>\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ninterface IMapDispatchProps {\r\n    setTodolists: () => void\r\n    setAuthUserData: () => void\r\n    addTodolist: (newTodoListTitle: string) => void\r\n    logout: () => void\r\n}\r\n\r\nclass ItemContainer extends React.Component<IMapStateProps & IMapDispatchProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.setTodolists();\r\n        this.props.setAuthUserData();\r\n    };\r\n\r\n    render() {\r\n\r\n        if(!this.props.isAuth){\r\n            return <Redirect to='/login'/>\r\n        }\r\n\r\n        return (\r\n            <Item {...this.props} />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): IMapStateProps => {\r\n    return {\r\n        todolists: state.reducer.todolists,\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Function): IMapDispatchProps => {\r\n    return {\r\n        addTodolist: (newTodoListTitle: string) => {\r\n            const thunk = addTodoListTC(newTodoListTitle);\r\n            dispatch(thunk);\r\n        },\r\n        setTodolists: (/*todolists: Array<ITodolist>*/) => {\r\n            const thunk = setTodoListTC(/*todolists*/);\r\n            dispatch(thunk);\r\n        },\r\n        setAuthUserData: (/*id: number, login: string, email: string*/) => {\r\n            const thunk = getAuthUserData(/*id, login, email*/);\r\n            dispatch(thunk);\r\n        },\r\n        logout: () => {\r\n            const thunk = logout();\r\n            dispatch(thunk);\r\n        }\r\n    }\r\n};\r\n\r\nconst ConnectedItemContainer = connect(mapStateToProps, mapDispatchToProps)(ItemContainer);\r\n\r\nexport default ConnectedItemContainer;\r\n\r\n","import React from 'react';\r\nimport mod from './App.module.css';\r\nimport Login from \"./components/Login/Login\";\r\nimport {Route} from \"react-router-dom\";\r\nimport ConnectedItemContainer from \"./components/Item/ItemContainer\";\r\n\r\nclass App extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={mod.appWrapper}>\r\n                <Route path='/login' render={() => <Login />}/>\r\n                <Route path='/' render={() => <ConnectedItemContainer />}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"TodoList_App__1_2JL\",\"todoList\":\"TodoList_todoList__14Jgj\",\"todoListHeader\":\"TodoList_todoListHeader__2kYED\",\"todoListDeleteButton\":\"TodoList_todoListDeleteButton__31VBZ\",\"todoListContent\":\"TodoList_todoListContent__3pyqt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1HjUh\",\"loginForm\":\"Login_loginForm__2Ee3A\",\"testData\":\"Login_testData__3VMnJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Item_App__1GlEt\",\"error\":\"Item_error__2WHcr\",\"itemHeader\":\"Item_itemHeader__1Om1T\",\"logout\":\"Item_logout__2m_JE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListTask\":\"TodoListTask_todoListTask__1z8cr\",\"toDoListCheck\":\"TodoListTask_toDoListCheck__tpMHF\",\"done\":\"TodoListTask_done__2-InM\",\"todoListTaskDelete\":\"TodoListTask_todoListTaskDelete__2sd-L\",\"todoListTaskItem\":\"TodoListTask_todoListTaskItem__2zRwl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterActive\":\"TodoListFooter_filterActive__3CMgb\"};","module.exports = __webpack_public_path__ + \"static/media/basket.491ecf80.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__RD53d\",\"error\":\"FormControl_error__2OUbJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListNewTaskForm\":\"TodoListInputForm_todoListNewTaskForm__2BcMN\"};"],"sourceRoot":""}